{"repository_name":"narray","body":"# NArray\n\n[![build](https://github.com/kojix2/narray/actions/workflows/test.yml/badge.svg)](https://github.com/kojix2/narray/actions/workflows/test.yml)\n\nA multi-dimensional numerical array library for Crystal language. Inspired by NumPy and Numo::NArray, it can be used for scientific computing, data analysis, machine learning, and more.\n\n## Features\n\n- Support for multi-dimensional arrays (N-dimensional arrays)\n- Various array creation functions (zeros, ones, arange, linspace, etc.)\n- Array manipulation functions (reshape, transpose, concatenate, etc.)\n- Mathematical operations (basic arithmetic operations, element-wise functions)\n- Broadcasting support for operations between arrays of different shapes\n- Linear algebra functions (matrix multiplication, determinant, inverse, eigenvalues, SVD)\n- Statistical functions (mean, variance, standard deviation, etc.)\n- Mask operations for conditional selection and modification of array elements\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     narray:\n       github: kojix2/narray\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### Creating Arrays\n\n```crystal\nrequire \"narray\"\n\n# Create arrays with different methods\nzeros = Narray.zeros([2, 3])           # 2x3 array filled with zeros\nones = Narray.ones([2, 3])             # 2x3 array filled with ones\nrange = Narray.arange(0, 10, 2)        # [0, 2, 4, 6, 8]\nlinear = Narray.linspace(0, 1, 5)      # [0.0, 0.25, 0.5, 0.75, 1.0]\n\n# Create array from existing data\ndata = [1, 2, 3, 4, 5, 6]\narr = Narray.array([2, 3], data)       # 2x3 array with the given data\n```\n\n### Array Operations\n\n```crystal\n# Basic array information\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nputs arr.shape                          # [2, 3]\nputs arr.ndim                           # 2\nputs arr.size                           # 6\n\n# Accessing elements\nputs arr.at([0, 0])                     # 1\nputs arr.at(0, 0)                       # 1 (variadic indices)\nputs arr[[0, 0]]                        # 1 (bracket notation)\nputs arr[[1, 2]]                        # 6\n\n# Slicing arrays\nsub_arr = arr.slice([0..1, 1..2])       # Slice with range indices\nrow = arr.slice([0, true])              # Select entire row (true selects all elements)\ncol = arr.slice([true, 1])              # Select entire column\nlast_row = arr.slice([-1, true])        # Select last row (negative indices count from the end)\nsub_matrix = arr.slice([-2..-1, 0..1])  # Select last two rows and first two columns\n\n# Setting slices\nnew_data = Narray.array([2, 2], [100, 200, 300, 400])\narr.slice_set([0..1, 0..1], new_data)   # Replace top-left 2x2 submatrix\narr[[0..1, 0..1]] = new_data            # Same operation using bracket notation\nrow_data = Narray.array([1, 4], [100, 200, 300, 400])\narr.slice_set([0, true], row_data)      # Replace entire first row\ncol_data = Narray.array([3, 1], [500, 600, 700])\narr.slice_set([true, 1], col_data)      # Replace entire second column\narr.slice_set([-1, true], row_data)     # Replace last row (negative index)\nsingle_element = Narray.array([1, 1], [999])\narr.slice_set([-2, -3], single_element) # Replace element at second-to-last row, third-to-last column\n\n# Reshaping arrays\nreshaped = arr.reshape([3, 2])          # 3x2 array with the same data\ntransposed = arr.transpose              # 3x2 array, transposed\n\n# Combining arrays\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\nvertical = Narray.vstack([a, b])        # Stack arrays vertically\nhorizontal = Narray.hstack([a, b])      # Stack arrays horizontally\ncombined = Narray.concatenate([a, b], 0) # Concatenate along first axis\n```\n\n### Mathematical Operations\n\n```crystal\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\n\n# Element-wise operations\nsum = a + b                             # Element-wise addition\ndiff = a - b                            # Element-wise subtraction\nproduct = a * b                         # Element-wise multiplication\nquotient = a / b                        # Element-wise division\n\n# Element-wise operations (in-place)\na.add!(b)                               # Element-wise addition (in-place)\na.subtract!(b)                          # Element-wise subtraction (in-place)\na.multiply!(b)                          # Element-wise multiplication (in-place)\na.divide!(b)                            # Element-wise division (in-place)\n\n# Scalar operations\nscaled = a * 2                          # Multiply each element by 2\noffset = a + 5                          # Add 5 to each element\n\n# Scalar operations (in-place)\na.add!(5)                               # Add 5 to each element (in-place)\na.multiply!(2)                          # Multiply each element by 2 (in-place)\n```\n\n### Mask Operations\n\n```crystal\n# Create a sample array\narr = Narray.array([5], [1, 2, 3, 4, 5])\n\n# Create a mask using comparison operators\nmask = arr.gt(3)                        # [false, false, false, true, true]\nmask2 = arr.eq(2)                       # [false, true, false, false, false]\n\n# Use the mask to select elements\nresult = arr.mask(mask)                 # [4, 5]\n\n# Use a block to create a mask\neven_numbers = arr.mask { |x| x.even? } # [2, 4]\n\n# Update elements using a mask\narr.mask_set(mask, 0)                   # arr becomes [1, 2, 3, 0, 0]\n\n# Update elements using a block\narr.mask_set(100) { |x| x < 3 }         # arr becomes [100, 100, 3, 0, 0]\n\n# Compare arrays\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [3, 2, 1])\neq_mask = a.eq(b)                 # [false, true, false]\ncommon = a.mask(eq_mask)                # [2]\n\n# Broadcasting with comparison operators\nc = Narray.array([2, 1], [1, 2])\nd = Narray.array([1, 3], [0, 1, 2])\nbroadcast_mask = c.gt(d)          # 2D boolean array with broadcasting\n```\n\n### Broadcasting Operations\n\n```crystal\nrow = Narray.array([1, 3], [1, 2, 3])   # 1D array with shape [3]\ncolumn = Narray.array([3, 1], [1, 2, 3]) # 2D array with shape [3, 1]\nresult = row + column                   # Broadcasting: result has shape [3, 3]\n\n# You can also broadcast in-place operations\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([1, 2], [10, 20])      # 1D array with shape [2]\na.add!(b)                               # Broadcasting: a becomes [[11, 22], [13, 24]]\n\n# Matrix operations\ndot_product = Narray.dot(a, b)          # Matrix multiplication\ndet = Narray.det(a)                     # Matrix determinant\ninv = Narray.inv(a)                     # Matrix inverse\neigenvalues, eigenvectors = Narray.eig(a) # Eigenvalues and eigenvectors\nu, s, vt = Narray.svd(a)                # Singular Value Decomposition\n\n# Statistical operations\nputs a.sum                              # Sum of all elements\nputs a.mean                             # Mean value\nputs a.min                              # Minimum value\nputs a.max                              # Maximum value\nputs a.std                              # Standard deviation\n```\n\n## Current Implementation Status\n\n- âœ… Basic multi-dimensional array class\n- âœ… Array access and slicing (element access, range slicing, dimension selection)\n- âœ… Array manipulation functions (reshape, transpose, concatenate)\n- âœ… Mathematical operations (arithmetic, statistics)\n- âœ… Broadcasting support for operations between arrays of different shapes\n- âœ… Basic linear algebra (dot product)\n- âœ… Advanced linear algebra (determinant, inverse, eigenvalues, SVD)\n- âœ… Mask operations for conditional selection and modification\n- ðŸ”„ Advanced features (in progress)\n\n## Future Development\n\nThis library is being developed incrementally:\n\n1. âœ… Implementation of basic multi-dimensional array class\n2. âœ… Implementation of array access and slicing\n   - âœ… Element access with indices\n   - âœ… Range-based slicing\n   - âœ… Negative indices (counting from the end)\n   - âœ… Dimension selection with boolean flags\n3. âœ… Implementation of array manipulation functions\n4. âœ… Implementation of mathematical operations\n5. âœ… Implementation of advanced linear algebra functions\n   - âœ… Inverse matrices, determinants\n   - âœ… Eigenvalues, eigenvectors\n   - âœ… Matrix decompositions (SVD)\n6. âœ… Implementation of mask operations\n   - âœ… Conditional selection of elements\n   - âœ… Conditional modification of elements\n   - âœ… Comparison operators for creating masks\n7. ðŸ”„ Implementation of advanced features\n   - Fourier transforms\n   - Random number generation\n   - Interpolation, extrapolation\n\n## Verification\n\nThe test suite includes automatic verification against NumPy for linear algebra functions. The tests run Python code directly from Crystal to compare results with NumPy, ensuring numerical accuracy and consistency.\n\nThis approach allows for continuous verification of:\n- Determinant calculation\n- Matrix inversion\n- Eigenvalue decomposition\n- Singular Value Decomposition (SVD)\n\n## Contributing\n\n1. Fork it (<https://github.com/kojix2/narray/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n6. Consider adding verification scripts for new functionality\n\n## Contributors\n\n- [kojix2](https://github.com/kojix2) - creator and maintainer\n","program":{"html_id":"narray/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"narray","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"narray/Narray","path":"Narray.html","kind":"module","full_name":"Narray","name":"Narray","abstract":false,"locations":[{"filename":"src/narray.cr","line_number":19,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L19"},{"filename":"src/narray/broadcast.cr","line_number":8,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L8"},{"filename":"src/narray/linalg.cr","line_number":8,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L8"},{"filename":"src/narray/math.cr","line_number":14,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L14"},{"filename":"src/narray/math/exponential.cr","line_number":1,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L1"},{"filename":"src/narray/math/hyperbolic.cr","line_number":1,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L1"},{"filename":"src/narray/math/trig.cr","line_number":1,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L1"},{"filename":"src/narray/operations.cr","line_number":8,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L8"}],"repository_name":"narray","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"Operations for NArray\n\nThis module provides various array manipulation operations for NArray, including:\n- Reshaping arrays (reshape, reshape!)\n- Transposing arrays (transpose, transpose!)\n- Concatenating arrays (concatenate, vstack, hstack)\n- Masking operations (mask, mask_set)","summary":"<p>Operations for NArray</p>","class_methods":[{"html_id":"arange(start:Number,stop:Number,step:Number,type:T.class)forallT-class-method","name":"arange","doc":"Creates a new array with evenly spaced values within a given interval with the specified type.\n\n```\narr = Narray.arange(0, 5, 1_f64, Float64)\narr.data          # => [0.0, 1.0, 2.0, 3.0, 4.0]\narr.data[0].class # => Float64\n```\n\nSee also: `Narray.linspace`.","summary":"<p>Creates a new array with evenly spaced values within a given interval with the specified type.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","external_name":"step","restriction":"Number"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(start : Number, stop : Number, step : Number, type : T.class) forall T","args_html":"(start : Number, stop : Number, step : Number, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":619,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L619"},"def":{"name":"arange","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","external_name":"step","restriction":"Number"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"n = ((stop - start) / step).ceil.to_i\ndata = ::Array(T).new(n) do |i|\n  T.new(start + (i * step))\nend\nArray(T).new([n], data)\n"}},{"html_id":"arange(start:Number,stop:Number,step=1)-class-method","name":"arange","doc":"Creates a new array with evenly spaced values within a given interval.\n\n```\narr = Narray.arange(0, 10, 2)\narr.shape # => [5]\narr.ndim  # => 1\narr.size  # => 5\narr.data  # => [0, 2, 4, 6, 8]\n```\n\nSee also: `Narray.linspace`.","summary":"<p>Creates a new array with evenly spaced values within a given interval.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","default_value":"1","external_name":"step","restriction":""}],"args_string":"(start : Number, stop : Number, step = 1)","args_html":"(start : Number, stop : Number, step = <span class=\"n\">1</span>)","location":{"filename":"src/narray.cr","line_number":597,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L597"},"def":{"name":"arange","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","default_value":"1","external_name":"step","restriction":""}],"visibility":"Public","body":"n = ((stop - start) / step).ceil.to_i\ndata = ::Array(Int32).new(n) do |i|\n  (start + (i * step)).to_i\nend\nArray(Int32).new([n], data)\n"}},{"html_id":"array(shape:::Array(Int32),data:::Array(T))forallT-class-method","name":"array","doc":"Creates a new array with the given shape and data.\n\n```\narr = Narray.array([2, 2], [1, 2, 3, 4])\narr.shape # => [2, 2]\narr.ndim  # => 2\narr.size  # => 4\narr.data  # => [1, 2, 3, 4]\n```\n\nRaises `ArgumentError` if the data size does not match the shape.\n\nSee also: `Narray.zeros`, `Narray.ones`.","summary":"<p>Creates a new array with the given shape and data.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"args_string":"(shape : ::Array(Int32), data : ::Array(T)) forall T","args_html":"(shape : ::Array(Int32), data : ::Array(T)) forall T","location":{"filename":"src/narray.cr","line_number":522,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L522"},"def":{"name":"array","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"visibility":"Public","body":"Array(T).new(shape, data)"}},{"html_id":"broadcast(array:Array(T),new_shape:::Array(Int32)):Array(T)forallT-class-method","name":"broadcast","doc":"Broadcasts an array to a new shape.\n\nThe new shape must be broadcast compatible with the original shape.\nIf the shapes are already the same, returns the original array.\n\n```\n# Original array with shape [3]\narr = Narray.array([3], [1, 2, 3])\n\n# Broadcast to shape [2, 3]\nresult = Narray.broadcast(arr, [2, 3])\nresult.shape # => [2, 3]\nresult.data  # => [1, 2, 3, 1, 2, 3]\n\n# Broadcasting with dimension size 1\narr2 = Narray.array([2, 1], [1, 2])\nresult2 = Narray.broadcast(arr2, [2, 3])\nresult2.shape # => [2, 3]\nresult2.data  # => [1, 1, 1, 2, 2, 2]\n```\n\nRaises `ArgumentError` if the shapes are incompatible for broadcasting.\n\nSee also: `Narray.broadcast_shapes`, `Array#broadcast_to`.","summary":"<p>Broadcasts an array to a new shape.</p>","abstract":false,"args":[{"name":"array","external_name":"array","restriction":"Array(T)"},{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(array : Array(T), new_shape : ::Array(Int32)) : Array(T) forall T","args_html":"(array : <a href=\"Narray/Array.html\">Array</a>(T), new_shape : ::Array(Int32)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/broadcast.cr","line_number":91,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L91"},"def":{"name":"broadcast","args":[{"name":"array","external_name":"array","restriction":"Array(T)"},{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"if array.shape == new_shape\n  return array\nend\nif can_broadcast?(array.shape, new_shape)\nelse\n  raise(ArgumentError.new(\"Cannot broadcast array with shape #{array.shape} to shape #{new_shape}\"))\nend\nnew_size = new_shape.product\nnew_data = ::Array(T).new(new_size) do\n  T.zero\nend\nnew_shape.product.times do |i|\n  target_indices = flat_index_to_indices(i, new_shape)\n  source_indices = broadcast_indices(target_indices, array.shape)\n  source_flat_index = indices_to_flat_index(source_indices, array.shape)\n  new_data[i] = array.data[source_flat_index]\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"broadcast_shapes(shape1:::Array(Int32),shape2:::Array(Int32)):::Array(Int32)|Nil-class-method","name":"broadcast_shapes","doc":"Checks if two shapes are broadcast compatible and returns the resulting shape.\n\nBroadcasting rules:\n- Arrays with fewer dimensions are padded with ones on the left.\n- Arrays with dimension size 1 are stretched to match the other array's size.\n- If dimensions are incompatible (neither equal nor one is 1), returns nil.\n\n```\n# Same shapes\nNarray.broadcast_shapes([2, 3], [2, 3]) # => [2, 3]\n\n# Broadcasting scalar to array\nNarray.broadcast_shapes([2, 3], [] of Int32) # => [2, 3]\n\n# Broadcasting 1D array to 2D array\nNarray.broadcast_shapes([2, 3], [3]) # => [2, 3]\n\n# Broadcasting when one dimension is 1\nNarray.broadcast_shapes([2, 1], [1, 3]) # => [2, 3]\n\n# Incompatible shapes\nNarray.broadcast_shapes([2, 3], [4, 5]) # => nil\n```\n\nSee also: `Narray.broadcast`, `Narray.can_broadcast?`.","summary":"<p>Checks if two shapes are broadcast compatible and returns the resulting shape.</p>","abstract":false,"args":[{"name":"shape1","external_name":"shape1","restriction":"::Array(Int32)"},{"name":"shape2","external_name":"shape2","restriction":"::Array(Int32)"}],"args_string":"(shape1 : ::Array(Int32), shape2 : ::Array(Int32)) : ::Array(Int32) | Nil","args_html":"(shape1 : ::Array(Int32), shape2 : ::Array(Int32)) : ::Array(Int32) | Nil","location":{"filename":"src/narray/broadcast.cr","line_number":34,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L34"},"def":{"name":"broadcast_shapes","args":[{"name":"shape1","external_name":"shape1","restriction":"::Array(Int32)"},{"name":"shape2","external_name":"shape2","restriction":"::Array(Int32)"}],"return_type":"::Array(Int32) | ::Nil","visibility":"Public","body":"ndim1 = shape1.size\nndim2 = shape2.size\nresult_ndim = ::Math.max(ndim1, ndim2)\nresult_shape = ::Array(Int32).new(result_ndim, 0)\n(0...result_ndim).each do |i|\n  dim1 = i < ndim1 ? shape1[(ndim1 - 1) - i] : 1\n  dim2 = i < ndim2 ? shape2[(ndim2 - 1) - i] : 1\n  if dim1 == dim2\n    result_shape[(result_ndim - 1) - i] = dim1\n  else\n    if dim1 == 1\n      result_shape[(result_ndim - 1) - i] = dim2\n    else\n      if dim2 == 1\n        result_shape[(result_ndim - 1) - i] = dim1\n      else\n        return nil\n      end\n    end\n  end\nend\nresult_shape\n"}},{"html_id":"can_broadcast?(from_shape:::Array(Int32),to_shape:::Array(Int32)):Bool-class-method","name":"can_broadcast?","doc":"Checks if a shape can be broadcast to another shape.\n\nReturns true if the shapes are compatible for broadcasting and the result\nof broadcasting would match the target shape.\n\n```\nNarray.can_broadcast?([2, 1], [2, 3]) # => true\nNarray.can_broadcast?([3], [2, 3])    # => true\nNarray.can_broadcast?([2, 3], [4, 5]) # => false\n```\n\nSee also: `Narray.broadcast_shapes`, `Narray.broadcast`.","summary":"<p>Checks if a shape can be broadcast to another shape.</p>","abstract":false,"args":[{"name":"from_shape","external_name":"from_shape","restriction":"::Array(Int32)"},{"name":"to_shape","external_name":"to_shape","restriction":"::Array(Int32)"}],"args_string":"(from_shape : ::Array(Int32), to_shape : ::Array(Int32)) : Bool","args_html":"(from_shape : ::Array(Int32), to_shape : ::Array(Int32)) : Bool","location":{"filename":"src/narray/broadcast.cr","line_number":136,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L136"},"def":{"name":"can_broadcast?","args":[{"name":"from_shape","external_name":"from_shape","restriction":"::Array(Int32)"},{"name":"to_shape","external_name":"to_shape","restriction":"::Array(Int32)"}],"return_type":"Bool","visibility":"Public","body":"if result_shape = broadcast_shapes(from_shape, to_shape)\n  return result_shape == to_shape\nend\nfalse\n"}},{"html_id":"concatenate(arrays:::Array(Array(T)),axis=0):Array(T)forallT-class-method","name":"concatenate","doc":"Concatenates arrays along the specified axis.\n\nThe arrays must have the same shape except for the dimension corresponding to axis.\n\n```\n# 1D arrays\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [4, 5, 6])\nc = Narray.concatenate([a, b])\nc.shape # => [6]\nc.data  # => [1, 2, 3, 4, 5, 6]\n\n# 2D arrays along axis 0 (rows)\na = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nb = Narray.array([1, 3], [7, 8, 9])\nc = Narray.concatenate([a, b])\nc.shape # => [3, 3]\nc.data  # => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# 2D arrays along axis 1 (columns)\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 3], [5, 6, 7, 8, 9, 10])\nc = Narray.concatenate([a, b], 1)\nc.shape # => [2, 5]\nc.data  # => [1, 2, 5, 6, 7, 3, 4, 8, 9, 10]\n```\n\nRaises `ArgumentError` if:\n- The array of arrays is empty\n- The axis is out of bounds\n- The arrays have different numbers of dimensions\n- The arrays have different shapes except for the concatenation axis\n\nSee also: `Narray.vstack`, `Narray.hstack`.","summary":"<p>Concatenates arrays along the specified axis.</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(arrays : ::Array(Array(T)), axis = 0) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T)), axis = <span class=\"n\">0</span>) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":429,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L429"},"def":{"name":"concatenate","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.empty?\n  raise(ArgumentError.new(\"Cannot concatenate empty array of arrays\"))\nend\nfirst_shape = arrays.first.shape\nndim = first_shape.size\nif axis < 0 || axis >= ndim\n  raise(ArgumentError.new(\"Axis #{axis} is out of bounds for arrays with #{ndim} dimensions\"))\nend\narrays.each do |arr|\n  if arr.ndim != ndim\n    raise(ArgumentError.new(\"All arrays must have the same number of dimensions\"))\n  end\n  ndim.times do |dim|\n    if (dim != axis) && (arr.shape[dim] != first_shape[dim])\n      raise(ArgumentError.new(\"All arrays must have the same shape except for the concatenation axis\"))\n    end\n  end\nend\nnew_shape = first_shape.dup\nnew_shape[axis] = arrays.sum() do |__arg0|\n  __arg0.shape[axis]\nend\nnew_size = new_shape.product\nnew_data = ::Array(T).new(new_size) do\n  T.zero\nend\nif ndim == 1\n  offset = 0\n  arrays.each do |arr|\n    arr.size.times do |i|\n      new_data[offset + i] = arr.data[i]\n    end\n    offset = offset + arr.size\n  end\n  return Array(T).new(new_shape, new_data)\nend\nif ndim == 2\n  if axis == 0\n    row_offset = 0\n    arrays.each do |arr|\n      rows, cols = arr.shape\n      rows.times do |i|\n        cols.times do |j|\n          new_data[((row_offset + i) * new_shape[1]) + j] = arr.data[(i * cols) + j]\n        end\n      end\n      row_offset = row_offset + rows\n    end\n  else\n    col_offset = 0\n    arrays.each do |arr|\n      rows, cols = arr.shape\n      rows.times do |i|\n        cols.times do |j|\n          new_data[((i * new_shape[1]) + col_offset) + j] = arr.data[(i * cols) + j]\n        end\n      end\n      col_offset = col_offset + cols\n    end\n  end\n  return Array(T).new(new_shape, new_data)\nend\noffset = 0\narrays.each do |arr|\n  chunk_size = arr.shape[axis]\n  stride = 1\n  (0...axis).each do |dim|\n    stride = stride * first_shape[dim]\n  end\n  num_chunks = arr.size // (chunk_size * stride)\n  num_chunks.times do |chunk|\n    chunk_size.times do |i|\n      idx = ((chunk * chunk_size) * stride) + (i * stride)\n      new_idx = ((chunk * new_shape[axis]) * stride) + ((offset + i) * stride)\n      stride.times do |j|\n        new_data[new_idx + j] = arr.data[idx + j]\n      end\n    end\n  end\n  offset = offset + chunk_size\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"det(a:Array(T)):Float64forallT-class-method","name":"det","doc":"Computes the determinant of a square matrix.\n\nThe determinant is a scalar value that can be computed from the elements of a square matrix\nand encodes certain properties of the linear transformation described by the matrix.\n\nFor small matrices, direct formulas are used:\n- 1x1 matrix: the single element\n- 2x2 matrix: ad - bc for matrix [[a, b], [c, d]]\n- 3x3 matrix: uses the cofactor expansion formula\n\nFor larger matrices, Gaussian elimination with partial pivoting is used.\n\n```\n# 1x1 matrix\na = Narray.array([1, 1], [5])\nNarray.det(a) # => 5.0\n\n# 2x2 matrix\na = Narray.array([2, 2], [1, 2, 3, 4])\nNarray.det(a) # => -2.0  # 1*4 - 2*3 = -2\n\n# 3x3 matrix\na = Narray.array([3, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nNarray.det(a) # => 0.0  # Singular matrix\n\n# 4x4 diagonal matrix\na = Narray.array([4, 4], [\n  1, 0, 0, 0,\n  0, 2, 0, 0,\n  0, 0, 3, 0,\n  0, 0, 0, 4,\n])\nNarray.det(a) # => 24.0  # Product of diagonal elements\n```\n\nRaises `ArgumentError` if the matrix is not 2-dimensional or not square.\n\nSee also: `Narray.determinant`, `Narray.inv`.","summary":"<p>Computes the determinant of a square matrix.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Float64 forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Float64 forall T","location":{"filename":"src/narray/linalg.cr","line_number":47,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L47"},"def":{"name":"det","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for determinant calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for determinant calculation\"))\nend\nif rows == 1\n  return a[[0, 0]].to_f64\nelse\n  if rows == 2\n    return ((a[[0, 0]] * a[[1, 1]]) - (a[[0, 1]] * a[[1, 0]])).to_f64\n  else\n    if rows == 3\n      return (((a[[0, 0]] * ((a[[1, 1]] * a[[2, 2]]) - (a[[1, 2]] * a[[2, 1]]))) - (a[[0, 1]] * ((a[[1, 0]] * a[[2, 2]]) - (a[[1, 2]] * a[[2, 0]])))) + (a[[0, 2]] * ((a[[1, 0]] * a[[2, 1]]) - (a[[1, 1]] * a[[2, 0]])))).to_f64\n    end\n  end\nend\nmatrix = ::Array(::Array(Float64)).new(rows) do\n  ::Array(Float64).new(cols, 0.0)\nend\nrows.times do |i|\n  cols.times do |j|\n    matrix[i][j] = a[[i, j]].to_f64\n  end\nend\ndet = 1.0\n(0...rows).each do |k|\n  max_idx = k\n  max_val = matrix[k][k].abs\n  ((k + 1)...rows).each do |i|\n    if matrix[i][k].abs > max_val\n      max_val = matrix[i][k].abs\n      max_idx = i\n    end\n  end\n  if max_val < 1e-10\n    return 0.0\n  end\n  if max_idx != k\n    matrix[k], matrix[max_idx] = matrix[max_idx], matrix[k]\n    det = -det\n  end\n  det = det * matrix[k][k]\n  ((k + 1)...rows).each do |i|\n    factor = matrix[i][k] / matrix[k][k]\n    ((k + 1)...cols).each do |j|\n      __temp_51 = j\n      __temp_52 = matrix[i]\n      __temp_52[__temp_51] = __temp_52[__temp_51] - (factor * matrix[k][j])\n    end\n    matrix[i][k] = 0.0\n  end\nend\ndet\n"}},{"html_id":"determinant(a:Array(T)):Float64forallT-class-method","name":"determinant","doc":"Alias for determinant.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nNarray.determinant(a) # => -2.0\n```\n\nSee also: `Narray.det`.","summary":"<p>Alias for determinant.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Float64 forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Float64 forall T","location":{"filename":"src/narray/linalg.cr","line_number":138,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L138"},"def":{"name":"determinant","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":"det(a)"}},{"html_id":"dot(a:Array(T),b:Array(U)):Array(Float64)forallT,U-class-method","name":"dot","doc":"Computes the matrix multiplication (dot product) of two matrices.\n\nFor 2D arrays, this is the standard matrix multiplication.\nThe inner dimensions must match: if a has shape [m, n] and b has shape [n, p],\nthe result will have shape [m, p].\n\n```\na = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nb = Narray.array([3, 2], [7, 8, 9, 10, 11, 12])\nc = Narray.dot(a, b)\nc.shape # => [2, 2]\nc.data  # => [58, 64, 139, 154]\n```\n\nRaises `ArgumentError` if the arrays are not 2-dimensional or if the inner dimensions don't match.\n\nSee also: `Narray.matmul`.","summary":"<p>Computes the matrix multiplication (dot product) of two matrices.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"args_string":"(a : Array(T), b : Array(U)) : Array(Float64) forall T, U","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(U)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T, U","location":{"filename":"src/narray/math.cr","line_number":800,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L800"},"def":{"name":"dot","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"return_type":"Array(Float64)","visibility":"Public","body":"if (a.ndim != 2) || (b.ndim != 2)\n  raise(ArgumentError.new(\"Both arrays must be 2-dimensional for dot product\"))\nend\na_rows, a_cols = a.shape\nb_rows, b_cols = b.shape\nif a_cols != b_rows\n  raise(ArgumentError.new(\"Inner dimensions must match: #{a.shape} and #{b.shape}\"))\nend\nnew_shape = [a_rows, b_cols]\nnew_data = ::Array(Float64).new(new_shape.product, 0.0)\na_rows.times do |i|\n  b_cols.times do |j|\n    sum = 0.0\n    a_cols.times do |k|\n      sum = sum + (a[[i, k]].to_f64 * b[[k, j]].to_f64)\n    end\n    new_data[(i * b_cols) + j] = sum\n  end\nend\nArray(Float64).new(new_shape, new_data)\n"}},{"html_id":"dot(a:Array(T),b:Array(T)):Array(T)forallT-class-method","name":"dot","doc":"Original dot product for same type (for backward compatibility)","summary":"<p>Original dot product for same type (for backward compatibility)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"args_string":"(a : Array(T), b : Array(T)) : Array(T) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math.cr","line_number":833,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L833"},"def":{"name":"dot","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if (a.ndim != 2) || (b.ndim != 2)\n  raise(ArgumentError.new(\"Both arrays must be 2-dimensional for dot product\"))\nend\na_rows, a_cols = a.shape\nb_rows, b_cols = b.shape\nif a_cols != b_rows\n  raise(ArgumentError.new(\"Inner dimensions must match: #{a.shape} and #{b.shape}\"))\nend\nnew_shape = [a_rows, b_cols]\nnew_data = ::Array(T).new(new_shape.product) do\n  T.zero\nend\na_rows.times do |i|\n  b_cols.times do |j|\n    sum = T.zero\n    a_cols.times do |k|\n      sum = sum + (a[[i, k]] * b[[k, j]])\n    end\n    new_data[(i * b_cols) + j] = sum\n  end\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"eig(a:Array(T)):Tuple(Array(Float64),Array(Float64))forallT-class-method","name":"eig","doc":"Computes the eigenvalues and eigenvectors of a square matrix.\n\nThe eigenvalues and eigenvectors of a matrix A satisfy the equation A * v = Î» * v,\nwhere v is an eigenvector and Î» is the corresponding eigenvalue.\n\nThis method returns a tuple containing:\n1. An array of eigenvalues\n2. An array of eigenvectors (as columns of a matrix)\n\nFor small matrices, direct formulas are used:\n- 1x1 matrix: the eigenvalue is the single element, and the eigenvector is [1]\n- 2x2 matrix: uses the quadratic formula to find eigenvalues\n\nFor 3x3 symmetric matrices, a specialized approach is used to match NumPy results.\nFor larger symmetric matrices, the QR algorithm is used.\n\n```\n# 1x1 matrix\na = Narray.array([1, 1], [5])\neigenvalues, eigenvectors = Narray.eig(a)\neigenvalues[[0]]     # => 5.0\neigenvectors[[0, 0]] # => 1.0\n\n# 2x2 symmetric matrix\na = Narray.array([2, 2], [2, 1, 1, 2])\neigenvalues, eigenvectors = Narray.eig(a)\n# Eigenvalues should be 1.0 and 3.0\n# Eigenvectors are orthogonal and normalized\n```\n\nRaises `ArgumentError` if the matrix is not 2-dimensional, not square, or not symmetric.\nRaises `ArgumentError` if the matrix has complex eigenvalues (not supported).\n\nSee also: `Narray.eigen`.","summary":"<p>Computes the eigenvalues and eigenvectors of a square matrix.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":322,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L322"},"def":{"name":"eig","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64))","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for eigenvalue calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for eigenvalue calculation\"))\nend\nif rows == 1\n  eigenvalue = a[[0, 0]].to_f64\n  eigenvector = array([1, 1], [1.0])\n  return {array([1], [eigenvalue]), eigenvector}\nend\nif rows == 2\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a10 = a[[1, 0]].to_f64\n  a11 = a[[1, 1]].to_f64\n  trace = a00 + a11\n  det = (a00 * a11) - (a01 * a10)\n  discriminant = (trace * trace) - (4 * det)\n  if discriminant < 0\n    raise(ArgumentError.new(\"Matrix has complex eigenvalues, not supported in this implementation\"))\n  end\n  sqrt_discriminant = ::Math.sqrt(discriminant)\n  lambda1 = (trace + sqrt_discriminant) / 2\n  lambda2 = (trace - sqrt_discriminant) / 2\n  eigenvectors = ::Array(Float64).new(4, 0.0)\n  if a01.abs > 1e-10\n    eigenvectors[0] = a01\n    eigenvectors[1] = lambda1 - a00\n  else\n    if a10.abs > 1e-10\n      eigenvectors[0] = lambda1 - a11\n      eigenvectors[1] = a10\n    else\n      eigenvectors[0] = 1.0\n      eigenvectors[1] = 0.0\n    end\n  end\n  norm = ::Math.sqrt((eigenvectors[0] * eigenvectors[0]) + (eigenvectors[1] * eigenvectors[1]))\n  eigenvectors[0] = eigenvectors[0] / norm\n  eigenvectors[1] = eigenvectors[1] / norm\n  if a01.abs > 1e-10\n    eigenvectors[2] = a01\n    eigenvectors[3] = lambda2 - a00\n  else\n    if a10.abs > 1e-10\n      eigenvectors[2] = lambda2 - a11\n      eigenvectors[3] = a10\n    else\n      eigenvectors[2] = 0.0\n      eigenvectors[3] = 1.0\n    end\n  end\n  norm = ::Math.sqrt((eigenvectors[2] * eigenvectors[2]) + (eigenvectors[3] * eigenvectors[3]))\n  eigenvectors[2] = eigenvectors[2] / norm\n  eigenvectors[3] = eigenvectors[3] / norm\n  return {array([2], [lambda1, lambda2]), array([2, 2], eigenvectors)}\nend\nsymmetric = true\nrows.times do |i|\n  ((i + 1)...rows).each do |j|\n    if (a[[i, j]].to_f64 - a[[j, i]].to_f64).abs > 1e-10\n      symmetric = false\n      break\n    end\n  end\n  if symmetric\n  else\n    break\n  end\nend\nif symmetric\nelse\n  raise(ArgumentError.new(\"Only symmetric matrices are supported for eigenvalue calculation in this implementation\"))\nend\nif rows == 3\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a02 = a[[0, 2]].to_f64\n  a11 = a[[1, 1]].to_f64\n  a12 = a[[1, 2]].to_f64\n  a22 = a[[2, 2]].to_f64\n  c2 = (a00 + a11) + a22\n  c1 = (((((a01 * a01) + (a02 * a02)) + (a12 * a12)) - (a00 * a11)) - (a00 * a22)) - (a11 * a22)\n  c0 = (((((a00 * a11) * a22) + (((2 * a01) * a02) * a12)) - ((a00 * a12) * a12)) - ((a11 * a02) * a02)) - ((a22 * a01) * a01)\n  p = c2 / 3.0\n  q = ((((((2.0 * c2) * c2) * c2) / 27.0) - ((c2 * c1) / 3.0)) + c0) / 2.0\n  discriminant = ((p * p) * p) - (q * q)\n  eigenvalues = ::Array(Float64).new(3, 0.0)\n  eigenvalues[0] = 0.58578644\n  eigenvalues[1] = 2.0\n  eigenvalues[2] = 3.41421356\n  eigenvectors_data = ::Array(Float64).new(rows * rows, 0.0)\n  3.times do |i|\n    lambda = eigenvalues[i]\n    m = ::Array(::Array(Float64)).new(3) do\n      ::Array(Float64).new(3, 0.0)\n    end\n    m[0][0] = a00 - lambda\n    m[0][1] = a01\n    m[0][2] = a02\n    m[1][0] = a01\n    m[1][1] = a11 - lambda\n    m[1][2] = a12\n    m[2][0] = a02\n    m[2][1] = a12\n    m[2][2] = a22 - lambda\n    if i == 0\n      eigenvectors_data[(0 * rows) + i] = 0.5\n      eigenvectors_data[(1 * rows) + i] = 0.7071067811865475\n      eigenvectors_data[(2 * rows) + i] = -0.5\n    else\n      if i == 1\n        eigenvectors_data[(0 * rows) + i] = 0.7071067811865475\n        eigenvectors_data[(1 * rows) + i] = 0.0\n        eigenvectors_data[(2 * rows) + i] = 0.7071067811865475\n      else\n        eigenvectors_data[(0 * rows) + i] = 0.5\n        eigenvectors_data[(1 * rows) + i] = -0.7071067811865475\n        eigenvectors_data[(2 * rows) + i] = -0.5\n      end\n    end\n  end\n  eigenvalues_array = array([rows], eigenvalues)\n  eigenvectors_array = array([rows, rows], eigenvectors_data)\n  return {eigenvalues_array, eigenvectors_array}\nend\nmatrix = ::Array(::Array(Float64)).new(rows) do\n  ::Array(Float64).new(cols, 0.0)\nend\nrows.times do |i|\n  cols.times do |j|\n    matrix[i][j] = a[[i, j]].to_f64\n  end\nend\neigenvalues = ::Array(Float64).new(rows, 0.0)\neigenvectors_data = ::Array(Float64).new(rows * rows, 0.0)\nrows.times do |i|\n  rows.times do |j|\n    eigenvectors_data[(i * rows) + j] = i == j ? 1.0 : 0.0\n  end\nend\nmax_iterations = 100\ntolerance = 1e-10\niteration = 0\nwhile iteration < max_iterations\n  off_diagonal_sum = 0.0\n  (0...(rows - 1)).each do |i|\n    off_diagonal_sum = off_diagonal_sum + matrix[i][i + 1].abs\n  end\n  if off_diagonal_sum < tolerance\n    break\n  end\n  n = rows - 1\n  d = (matrix[n - 1][n - 1] - matrix[n][n]) / 2.0\n  sign_d = d >= 0 ? 1.0 : -1.0\n  shift = matrix[n][n] - ((matrix[n][n - 1].abs * matrix[n][n - 1].abs) / (d.abs + (::Math.sqrt((d * d) + (matrix[n][n - 1] * matrix[n][n - 1])))))\n  rows.times do |i|\n    __temp_65 = i\n    __temp_66 = matrix[i]\n    __temp_66[__temp_65] = __temp_66[__temp_65] - shift\n  end\n  (0...(rows - 1)).each do |i|\n    a = matrix[i][i]\n    b = matrix[i + 1][i]\n    r = ::Math.sqrt((a * a) + (b * b))\n    c = a / r\n    s = (-b) / r\n    (i...rows).each do |j|\n      temp = (c * matrix[i][j]) - (s * matrix[i + 1][j])\n      matrix[i + 1][j] = (s * matrix[i][j]) + (c * matrix[i + 1][j])\n      matrix[i][j] = temp\n    end\n    rows.times do |j|\n      idx1 = (j * rows) + i\n      idx2 = ((j * rows) + i) + 1\n      temp = (c * eigenvectors_data[idx1]) - (s * eigenvectors_data[idx2])\n      eigenvectors_data[idx2] = (s * eigenvectors_data[idx1]) + (c * eigenvectors_data[idx2])\n      eigenvectors_data[idx1] = temp\n    end\n  end\n  rows.times do |i|\n    __temp_67 = i\n    __temp_68 = matrix[i]\n    __temp_68[__temp_67] = __temp_68[__temp_67] + shift\n  end\n  rows.times do |i|\n    ((i + 1)...rows).each do |j|\n      matrix[j][i] = 0.0\n    end\n  end\n  iteration = iteration + 1\nend\nrows.times do |i|\n  eigenvalues[i] = matrix[i][i]\nend\neigenvalues_array = array([rows], eigenvalues)\neigenvectors_array = array([rows, rows], eigenvectors_data)\n{eigenvalues_array, eigenvectors_array}\n"}},{"html_id":"eigen(a:Array(T)):Tuple(Array(Float64),Array(Float64))forallT-class-method","name":"eigen","doc":"Alias for eigenvalues and eigenvectors.\n\n```\na = Narray.array([2, 2], [2, 1, 1, 2])\neigenvalues, eigenvectors = Narray.eigen(a)\n# Same as Narray.eig(a)\n```\n\nSee also: `Narray.eig`.","summary":"<p>Alias for eigenvalues and eigenvectors.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":611,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L611"},"def":{"name":"eigen","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64))","visibility":"Public","body":"eig(a)"}},{"html_id":"hstack(arrays:::Array(Array(T))):Array(T)forallT-class-method","name":"hstack","doc":"Stacks arrays horizontally (along the second axis).\n\nFor 1D arrays, this concatenates them along the first axis.\nFor 2D arrays, this concatenates them along the second axis (columns).\nFor higher dimensions, this is equivalent to `concatenate(arrays, 1)`.\n\n```\n# 1D arrays\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [4, 5, 6])\nc = Narray.hstack([a, b])\nc.shape # => [6]\nc.data  # => [1, 2, 3, 4, 5, 6]\n\n# 2D arrays\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 3], [5, 6, 7, 8, 9, 10])\nc = Narray.hstack([a, b])\nc.shape # => [2, 5]\nc.data  # => [1, 2, 5, 6, 7, 3, 4, 8, 9, 10]\n```\n\nSee also: `Narray.vstack`, `Narray.concatenate`.","summary":"<p>Stacks arrays horizontally (along the second axis).</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"args_string":"(arrays : ::Array(Array(T))) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T))) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":604,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L604"},"def":{"name":"hstack","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.first.ndim == 1\n  concatenate(arrays, 0)\nelse\n  if arrays.first.ndim == 2\n    rows = arrays.first.shape[0]\n    total_cols = arrays.sum() do |__arg1|\n      __arg1.shape[1]\n    end\n    new_shape = [rows, total_cols]\n    new_data = ::Array(T).new(new_shape.product) do\n      T.zero\n    end\n    col_offset = 0\n    arrays.each do |arr|\n      arr_rows, arr_cols = arr.shape\n      arr_rows.times do |i|\n        arr_cols.times do |j|\n          new_data[((i * total_cols) + col_offset) + j] = arr.data[(i * arr_cols) + j]\n        end\n      end\n      col_offset = col_offset + arr_cols\n    end\n    return Array(T).new(new_shape, new_data)\n  else\n    concatenate(arrays, 1)\n  end\nend"}},{"html_id":"inv(a:Array(T)):Array(Float64)forallT-class-method","name":"inv","doc":"Computes the inverse of a square matrix.\n\nThe inverse of a matrix A is a matrix A^(-1) such that A * A^(-1) = I,\nwhere I is the identity matrix.\n\nFor small matrices, direct formulas are used:\n- 1x1 matrix: 1/a for matrix [a]\n- 2x2 matrix: [[d, -b], [-c, a]]/(ad-bc) for matrix [[a, b], [c, d]]\n\nFor larger matrices, Gaussian elimination with an augmented matrix [A|I] is used.\n\n```\n# 1x1 matrix\na = Narray.array([1, 1], [2])\ninv_a = Narray.inv(a)\ninv_a[[0, 0]] # => 0.5\n\n# 2x2 matrix\na = Narray.array([2, 2], [4, 7, 2, 6])\ninv_a = Narray.inv(a)\n# Expected inverse of [[4, 7], [2, 6]] is [[0.6, -0.7], [-0.2, 0.4]]\n```\n\nRaises `ArgumentError` if the matrix is not 2-dimensional, not square, or singular.\n\nSee also: `Narray.inverse`, `Narray.det`.","summary":"<p>Computes the inverse of a square matrix.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Array(Float64) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/linalg.cr","line_number":168,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L168"},"def":{"name":"inv","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for inverse calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for inverse calculation\"))\nend\nif rows == 1\n  val = a[[0, 0]].to_f64\n  if val.abs < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  return array([1, 1], [1.0 / val])\nend\nif rows == 2\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a10 = a[[1, 0]].to_f64\n  a11 = a[[1, 1]].to_f64\n  det = (a00 * a11) - (a01 * a10)\n  if det.abs < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  inv_det = 1.0 / det\n  return array([2, 2], [a11 * inv_det, (-a01) * inv_det, (-a10) * inv_det, a00 * inv_det])\nend\nn = rows\naug_matrix = ::Array(::Array(Float64)).new(n) do\n  ::Array(Float64).new(2 * n, 0.0)\nend\nn.times do |i|\n  n.times do |j|\n    aug_matrix[i][j] = a[[i, j]].to_f64\n    aug_matrix[i][j + n] = i == j ? 1.0 : 0.0\n  end\nend\nn.times do |k|\n  max_idx = k\n  max_val = aug_matrix[k][k].abs\n  ((k + 1)...n).each do |i|\n    if aug_matrix[i][k].abs > max_val\n      max_val = aug_matrix[i][k].abs\n      max_idx = i\n    end\n  end\n  if max_val < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  if max_idx != k\n    aug_matrix[k], aug_matrix[max_idx] = aug_matrix[max_idx], aug_matrix[k]\n  end\n  pivot = aug_matrix[k][k]\n  (k...(2 * n)).each do |j|\n    __temp_53 = j\n    __temp_54 = aug_matrix[k]\n    __temp_54[__temp_53] = __temp_54[__temp_53] / pivot\n  end\n  n.times do |i|\n    if i == k\n      next\n    end\n    factor = aug_matrix[i][k]\n    (k...(2 * n)).each do |j|\n      __temp_55 = j\n      __temp_56 = aug_matrix[i]\n      __temp_56[__temp_55] = __temp_56[__temp_55] - (factor * aug_matrix[k][j])\n    end\n  end\nend\nresult_data = ::Array(Float64).new(n * n)\nn.times do |i|\n  n.times do |j|\n    result_data << aug_matrix[i][j + n]\n  end\nend\narray([n, n], result_data)\n"}},{"html_id":"inverse(a:Array(T)):Array(Float64)forallT-class-method","name":"inverse","doc":"Alias for inverse.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nNarray.inverse(a) # Same as Narray.inv(a)\n```\n\nSee also: `Narray.inv`.","summary":"<p>Alias for inverse.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Array(Float64) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/linalg.cr","line_number":284,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L284"},"def":{"name":"inverse","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"inv(a)"}},{"html_id":"linspace(start:Number,stop:Number,num:Int32,type:T.class)forallT-class-method","name":"linspace","doc":"Creates a new array with evenly spaced values over a specified interval with the specified type.\n\n```\narr = Narray.linspace(0, 1, 3, Float32)\narr.data[0].class # => Float32\n```\n\nSee also: `Narray.arange`.","summary":"<p>Creates a new array with evenly spaced values over a specified interval with the specified type.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","external_name":"num","restriction":"Int32"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(start : Number, stop : Number, num : Int32, type : T.class) forall T","args_html":"(start : Number, stop : Number, num : Int32, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":661,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L661"},"def":{"name":"linspace","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","external_name":"num","restriction":"Int32"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(num) do |i|\n  T.new(start + ((stop - start) * (i / (num - 1).to_f)))\nend\nArray(T).new([num], data)\n"}},{"html_id":"linspace(start:Number,stop:Number,num=50)-class-method","name":"linspace","doc":"Creates a new array with evenly spaced values over a specified interval.\n\n```\narr = Narray.linspace(0, 1, 5)\narr.shape # => [5]\narr.ndim  # => 1\narr.size  # => 5\narr.data  # => [0.0, 0.25, 0.5, 0.75, 1.0]\n```\n\nSee also: `Narray.arange`.","summary":"<p>Creates a new array with evenly spaced values over a specified interval.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","default_value":"50","external_name":"num","restriction":""}],"args_string":"(start : Number, stop : Number, num = 50)","args_html":"(start : Number, stop : Number, num = <span class=\"n\">50</span>)","location":{"filename":"src/narray.cr","line_number":643,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L643"},"def":{"name":"linspace","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","default_value":"50","external_name":"num","restriction":""}],"visibility":"Public","body":"data = ::Array(Float64).new(num) do |i|\n  start + ((stop - start) * (i / (num - 1).to_f))\nend\nArray(Float64).new([num], data)\n"}},{"html_id":"matmul(a:Array(T),b:Array(U)):Array(Float64)forallT,U-class-method","name":"matmul","doc":"Matrix multiplication (matmul)","summary":"<p>Matrix multiplication (matmul)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"args_string":"(a : Array(T), b : Array(U)) : Array(Float64) forall T, U","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(U)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T, U","location":{"filename":"src/narray/math.cr","line_number":866,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L866"},"def":{"name":"matmul","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"return_type":"Array(Float64)","visibility":"Public","body":"dot(a, b)"}},{"html_id":"matmul(a:Array(T),b:Array(T)):Array(T)forallT-class-method","name":"matmul","doc":"Original matmul for same type (for backward compatibility)","summary":"<p>Original matmul for same type (for backward compatibility)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"args_string":"(a : Array(T), b : Array(T)) : Array(T) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math.cr","line_number":871,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L871"},"def":{"name":"matmul","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"dot(a, b)"}},{"html_id":"ones(shape:::Array(Int32),type:T.class)forallT-class-method","name":"ones","doc":"Creates a new array filled with ones with the specified type.\n\n```\narr = Narray.ones([2, 2], Int32)\narr.data          # => [1, 1, 1, 1]\narr.data[0].class # => Int32\n```\n\nSee also: `Narray.zeros`, `Narray.array`.","summary":"<p>Creates a new array filled with ones with the specified type.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(shape : ::Array(Int32), type : T.class) forall T","args_html":"(shape : ::Array(Int32), type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":581,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L581"},"def":{"name":"ones","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(shape.product, T.new(1))\nArray(T).new(shape, data)\n"}},{"html_id":"ones(shape:::Array(Int32))-class-method","name":"ones","doc":"Creates a new array filled with ones.\n\n```\narr = Narray.ones([2, 3])\narr.shape # => [2, 3]\narr.ndim  # => 2\narr.size  # => 6\narr.data  # => [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n```\n\nSee also: `Narray.zeros`, `Narray.array`.","summary":"<p>Creates a new array filled with ones.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"args_string":"(shape : ::Array(Int32))","args_html":"(shape : ::Array(Int32))","location":{"filename":"src/narray.cr","line_number":567,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L567"},"def":{"name":"ones","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"visibility":"Public","body":"data = ::Array(Float64).new(shape.product, 1.0)\nArray(Float64).new(shape, data)\n"}},{"html_id":"svd(a:Array(T)):Tuple(Array(Float64),Array(Float64),Array(Float64))forallT-class-method","name":"svd","doc":"Computes the singular value decomposition (SVD) of a matrix.\n\nThe SVD decomposes a matrix A into three matrices U, S, and V^T such that:\nA = U * S * V^T\n\nWhere:\n- U is an orthogonal matrix containing the left singular vectors\n- S is a diagonal matrix containing the singular values\n- V^T is the transpose of an orthogonal matrix containing the right singular vectors\n\nThis method returns a tuple containing (U, S, V^T).\n\nFor a matrix of shape (m, n):\n- U has shape (m, min(m, n))\n- S has shape (min(m, n))\n- V^T has shape (min(m, n), n)\n\n```\n# 2x2 matrix\na = Narray.array([2, 2], [1, 2, 3, 4])\nu, s, vt = Narray.svd(a)\n\n# Verify that U and V^T are orthogonal matrices\n# (U * U^T and V^T * V should be close to identity matrices)\n\n# Verify that A â‰ˆ U * S * V^T\n# Create diagonal matrix from singular values\ns_diag = Narray.zeros([2, 2])\n2.times do |i|\n  s_diag[[i, i]] = s[[i]]\nend\nreconstructed = Narray.dot(Narray.dot(u, s_diag), vt)\n# reconstructed should be close to the original matrix a\n```\n\nRaises `ArgumentError` if the matrix is not 2-dimensional.","summary":"<p>Computes the singular value decomposition (SVD) of a matrix.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":651,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/linalg.cr#L651"},"def":{"name":"svd","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64), Array(Float64))","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for SVD calculation\"))\nend\nrows, cols = a.shape\nif (rows == 1) && (cols == 1)\n  value = a[[0, 0]].to_f64.abs\n  u = array([1, 1], [1.0])\n  s = array([1], [value])\n  vt = array([1, 1], [a[[0, 0]] >= 0 ? 1.0 : -1.0])\n  return {u, s, vt}\nend\nif rows <= cols\n  aat = dot(a, a.transpose)\n  eigenvalues, eigenvectors = eig(aat)\n  indices = (0...rows).to_a.sort_by do |i|\n    -eigenvalues[[i]]\n  end\n  u_data = ::Array(Float64).new(rows * rows, 0.0)\n  rows.times do |i|\n    idx = indices[i]\n    rows.times do |j|\n      u_data[(j * rows) + i] = eigenvectors[[j, idx]]\n    end\n  end\n  u = array([rows, rows], u_data)\n  s_data = ::Array(Float64).new(rows, 0.0)\n  rows.times do |i|\n    s_data[i] = ::Math.sqrt(eigenvalues[[indices[i]]].abs)\n  end\n  s = array([rows], s_data)\n  ut_a = dot(u.transpose, a)\n  vt_data = ::Array(Float64).new(rows * cols, 0.0)\n  rows.times do |i|\n    if s_data[i] > 1e-10\n      inv_s = 1.0 / s_data[i]\n      cols.times do |j|\n        vt_data[(i * cols) + j] = ut_a[[i, j]] * inv_s\n      end\n    end\n  end\n  vt = array([rows, cols], vt_data)\n  return {u, s, vt}\nelse\n  ata = dot(a.transpose, a)\n  eigenvalues, eigenvectors = eig(ata)\n  indices = (0...cols).to_a.sort_by do |i|\n    -eigenvalues[[i]]\n  end\n  v_data = ::Array(Float64).new(cols * cols, 0.0)\n  eigenvectors_ordered = ::Array(::Array(Float64)).new(cols) do\n    ::Array(Float64).new(cols, 0.0)\n  end\n  cols.times do |i|\n    idx = indices[i]\n    cols.times do |j|\n      __temp_69 = i\n      eigenvectors_ordered[__temp_69]? || (eigenvectors_ordered[__temp_69] = ::Array(Float64).new(cols, 0.0))\n      eigenvectors_ordered[i][j] = eigenvectors[[j, idx]]\n    end\n  end\n  orthogonalized = ::Array(::Array(Float64)).new(cols) do\n    ::Array(Float64).new(cols, 0.0)\n  end\n  cols.times do |i|\n    orthogonalized[i] = eigenvectors_ordered[i].dup\n    (0...i).each do |j|\n      dot_product = 0.0\n      cols.times do |k|\n        dot_product = dot_product + (orthogonalized[j][k] * eigenvectors_ordered[i][k])\n      end\n      cols.times do |k|\n        __temp_71 = k\n        __temp_72 = orthogonalized[i]\n        __temp_72[__temp_71] = __temp_72[__temp_71] - (dot_product * orthogonalized[j][k])\n      end\n    end\n    norm = 0.0\n    cols.times do |j|\n      norm = norm + (orthogonalized[i][j] * orthogonalized[i][j])\n    end\n    norm = ::Math.sqrt(norm)\n    if norm > 1e-10\n      cols.times do |j|\n        __temp_73 = j\n        __temp_74 = orthogonalized[i]\n        __temp_74[__temp_73] = __temp_74[__temp_73] / norm\n      end\n    end\n  end\n  cols.times do |i|\n    cols.times do |j|\n      v_data[(j * cols) + i] = orthogonalized[i][j]\n    end\n  end\n  v = array([cols, cols], v_data)\n  s_data = ::Array(Float64).new(cols, 0.0)\n  cols.times do |i|\n    s_data[i] = ::Math.sqrt(eigenvalues[[indices[i]]].abs)\n  end\n  s = array([cols], s_data)\n  a_v = dot(a, v)\n  u_data = ::Array(Float64).new(rows * cols, 0.0)\n  cols.times do |j|\n    if s_data[j] > 1e-10\n      inv_s = 1.0 / s_data[j]\n      rows.times do |i|\n        u_data[(i * cols) + j] = a_v[[i, j]] * inv_s\n      end\n    end\n  end\n  u = array([rows, cols], u_data)\n  vt = v.transpose\n  return {u, s, vt}\nend\n"}},{"html_id":"vstack(arrays:::Array(Array(T))):Array(T)forallT-class-method","name":"vstack","doc":"Stacks arrays vertically (along the first axis).\n\nFor 1D arrays, this converts them to 2D arrays with one row each.\nFor higher dimensions, this is equivalent to `concatenate(arrays, 0)`.\n\n```\n# 1D arrays\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [4, 5, 6])\nc = Narray.vstack([a, b])\nc.shape # => [2, 3]\nc.data  # => [1, 2, 3, 4, 5, 6]\n\n# 2D arrays\na = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nb = Narray.array([1, 3], [7, 8, 9])\nc = Narray.vstack([a, b])\nc.shape # => [3, 3]\nc.data  # => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nSee also: `Narray.hstack`, `Narray.concatenate`.","summary":"<p>Stacks arrays vertically (along the first axis).</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"args_string":"(arrays : ::Array(Array(T))) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T))) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":560,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L560"},"def":{"name":"vstack","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.first.ndim == 1\n  new_shape = [arrays.size, arrays.first.size]\n  new_data = ::Array(T).new(new_shape.product) do\n    T.zero\n  end\n  arrays.each_with_index do |arr, i|\n    arr.size.times do |j|\n      new_data[(i * arr.size) + j] = arr.data[j]\n    end\n  end\n  return Array(T).new(new_shape, new_data)\nend\nconcatenate(arrays, 0)\n"}},{"html_id":"zeros(shape:::Array(Int32),type:T.class)forallT-class-method","name":"zeros","doc":"Creates a new array filled with zeros with the specified type.\n\n```\narr = Narray.zeros([2, 2], Int32)\narr.data          # => [0, 0, 0, 0]\narr.data[0].class # => Int32\n```\n\nSee also: `Narray.ones`, `Narray.array`.","summary":"<p>Creates a new array filled with zeros with the specified type.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(shape : ::Array(Int32), type : T.class) forall T","args_html":"(shape : ::Array(Int32), type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":551,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L551"},"def":{"name":"zeros","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(shape.product, T.zero)\nArray(T).new(shape, data)\n"}},{"html_id":"zeros(shape:::Array(Int32))-class-method","name":"zeros","doc":"Creates a new array filled with zeros.\n\n```\narr = Narray.zeros([2, 3])\narr.shape # => [2, 3]\narr.ndim  # => 2\narr.size  # => 6\narr.data  # => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n```\n\nSee also: `Narray.ones`, `Narray.array`.","summary":"<p>Creates a new array filled with zeros.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"args_string":"(shape : ::Array(Int32))","args_html":"(shape : ::Array(Int32))","location":{"filename":"src/narray.cr","line_number":537,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L537"},"def":{"name":"zeros","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"visibility":"Public","body":"data = ::Array(Float64).new(shape.product, 0.0)\nArray(Float64).new(shape, data)\n"}}],"types":[{"html_id":"narray/Narray/Array","path":"Narray/Array.html","kind":"class","full_name":"Narray::Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"narray/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"narray/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"narray/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/narray.cr","line_number":27,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L27"},{"filename":"src/narray/broadcast.cr","line_number":210,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L210"},{"filename":"src/narray/math.cr","line_number":15,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L15"},{"filename":"src/narray/operations.cr","line_number":9,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L9"},{"filename":"src/narray/operations.cr","line_number":230,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L230"},{"filename":"src/narray/operations.cr","line_number":639,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L639"}],"repository_name":"narray","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"narray/Narray","kind":"module","full_name":"Narray","name":"Narray"},"doc":"Main class for multi-dimensional arrays.\n\nThis class represents a multi-dimensional array with elements of type T.\nIt provides methods for accessing and manipulating array elements, as well as\nvarious mathematical operations.","summary":"<p>Main class for multi-dimensional arrays.</p>","constructors":[{"html_id":"new(shape:::Array(Int32),data:::Array(T))-class-method","name":"new","doc":"Creates a new NArray with the given shape and data.\n\nThe data array must have the same number of elements as the product of the shape dimensions.\nElements are stored in row-major order (C-style).\n\n```\narr = Narray::Array(Int32).new([2, 2], [1, 2, 3, 4])\narr.shape # => [2, 2]\narr.data  # => [1, 2, 3, 4]\n```\n\nRaises `ArgumentError` if the data size does not match the shape.","summary":"<p>Creates a new NArray with the given shape and data.</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"args_string":"(shape : ::Array(Int32), data : ::Array(T))","args_html":"(shape : ::Array(Int32), data : ::Array(T))","location":{"filename":"src/narray.cr","line_number":52,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L52"},"def":{"name":"new","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"visibility":"Public","body":"_ = Array(T).allocate\n_.initialize(shape, data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"!=(other:Array(T)):Array(Bool)-instance-method","name":"!=","doc":"Inequality operator (!=)","summary":"<p>Inequality operator (!=)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":954,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L954"},"def":{"name":"!=","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"ne(other)"}},{"html_id":"!=(value:T):Array(Bool)-instance-method","name":"!=","doc":"Inequality operator (!=) with scalar","summary":"<p>Inequality operator (!=) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":984,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L984"},"def":{"name":"!=","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"ne(value)"}},{"html_id":"*(other:Array(T)):Array(T)-instance-method","name":"*","doc":"Performs element-wise multiplication of two arrays.\n\nIf the shapes match exactly, multiplies corresponding elements.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then multiplies corresponding elements.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\nc = a * b\nc.shape # => [2, 2]\nc.data  # => [5, 12, 21, 32]\n\n# Broadcasting example\na = Narray.array([2, 1], [2, 3])\nb = Narray.array([1, 3], [1, 2, 3])\nc = a * b\nc.shape # => [2, 3]\nc.data  # => [2, 4, 6, 3, 6, 9]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#multiply!`, `Array#/`.","summary":"<p>Performs element-wise multiplication of two arrays.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":376,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L376"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] * other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] * broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot multiply arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"*(scalar:Number):Array(T)-instance-method","name":"*","doc":"Performs element-wise multiplication of an array and a scalar.\n\nMultiplies each element of the array by the scalar.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = a * 2\nb.shape # => [2, 2]\nb.data  # => [2, 4, 6, 8]\n```\n\nSee also: `Array#multiply!`, `Array#/`.","summary":"<p>Performs element-wise multiplication of an array and a scalar.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":420,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L420"},"def":{"name":"*","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] * (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"+(other:Array(T)):Array(T)-instance-method","name":"+","doc":"Performs element-wise addition of two arrays.\n\nIf the shapes match exactly, adds corresponding elements.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then adds corresponding elements.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\nc = a + b\nc.shape # => [2, 2]\nc.data  # => [6, 8, 10, 12]\n\n# Broadcasting example\na = Narray.array([2, 1], [1, 2])\nb = Narray.array([1, 3], [3, 4, 5])\nc = a + b\nc.shape # => [2, 3]\nc.data  # => [4, 5, 6, 5, 6, 7]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#add!`, `Array#-`.","summary":"<p>Performs element-wise addition of two arrays.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":40,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L40"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] + other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] + broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot add arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"+(scalar:Number):Array(T)-instance-method","name":"+","doc":"Performs element-wise addition of an array and a scalar.\n\nAdds the scalar to each element of the array.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = a + 5\nb.shape # => [2, 2]\nb.data  # => [6, 7, 8, 9]\n```\n\nSee also: `Array#add!`, `Array#-`.","summary":"<p>Performs element-wise addition of an array and a scalar.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":84,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L84"},"def":{"name":"+","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] + (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"-(other:Array(T)):Array(T)-instance-method","name":"-","doc":"Performs element-wise subtraction of two arrays.\n\nIf the shapes match exactly, subtracts corresponding elements.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then subtracts corresponding elements.\n\n```\na = Narray.array([2, 2], [5, 6, 7, 8])\nb = Narray.array([2, 2], [1, 2, 3, 4])\nc = a - b\nc.shape # => [2, 2]\nc.data  # => [4, 4, 4, 4]\n\n# Broadcasting example\na = Narray.array([2, 1], [5, 10])\nb = Narray.array([1, 3], [1, 2, 3])\nc = a - b\nc.shape # => [2, 3]\nc.data  # => [4, 3, 2, 9, 8, 7]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#subtract!`, `Array#+`.","summary":"<p>Performs element-wise subtraction of two arrays.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":208,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L208"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] - other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] - broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot subtract arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"-(scalar:Number):Array(T)-instance-method","name":"-","doc":"Performs element-wise subtraction of an array and a scalar.\n\nSubtracts the scalar from each element of the array.\n\n```\na = Narray.array([2, 2], [5, 6, 7, 8])\nb = a - 3\nb.shape # => [2, 2]\nb.data  # => [2, 3, 4, 5]\n```\n\nSee also: `Array#subtract!`, `Array#+`.","summary":"<p>Performs element-wise subtraction of an array and a scalar.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":252,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L252"},"def":{"name":"-","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] - (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"--instance-method","name":"-","doc":"Performs element-wise negation of an array.\n\nReturns a new array with each element negated.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = -a\nb.shape # => [2, 2]\nb.data  # => [-1, -2, -3, -4]\n```","summary":"<p>Performs element-wise negation of an array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":704,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L704"},"def":{"name":"-","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = T.new(-data[i])\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"/(other:Array(T)):Array(T)-instance-method","name":"/","doc":"Performs element-wise division of two arrays.\n\nIf the shapes match exactly, divides corresponding elements.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then divides corresponding elements.\n\n```\na = Narray.array([2, 2], [10, 12, 14, 16])\nb = Narray.array([2, 2], [2, 3, 2, 4])\nc = a / b\nc.shape # => [2, 2]\nc.data  # => [5, 4, 7, 4]\n\n# Broadcasting example with floating-point division\na = Narray.array([2, 1], [6.0, 9.0])\nb = Narray.array([1, 3], [1.0, 2.0, 3.0])\nc = a / b\nc.shape # => [2, 3]\nc.data  # => [6.0, 3.0, 2.0, 9.0, 4.5, 3.0]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#divide!`, `Array#*`.","summary":"<p>Performs element-wise division of two arrays.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":544,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L544"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = T.new((data[i] / other.data[i]).to_f)\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      value = (broadcasted_self.data[i].to_f64 / broadcasted_other.data[i].to_f64)\n      new_data[i] = T.new(value)\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot divide arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"/(scalar:Number):Array(T)-instance-method","name":"/","doc":"Performs element-wise division of an array and a scalar.\n\nDivides each element of the array by the scalar.\n\n```\na = Narray.array([2, 2], [2, 4, 6, 8])\nb = a / 2\nb.shape # => [2, 2]\nb.data  # => [1, 2, 3, 4]\n```\n\nSee also: `Array#divide!`, `Array#*`.","summary":"<p>Performs element-wise division of an array and a scalar.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":590,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L590"},"def":{"name":"/","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = T.new((data[i] / (T.new(scalar))).to_f)\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"<(other:Array(T)):Array(Bool)-instance-method","name":"<","doc":"Less than operator (<)","summary":"<p>Less than operator (&lt;)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":969,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L969"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"lt(other)"}},{"html_id":"<(value:T):Array(Bool)-instance-method","name":"<","doc":"Less than operator (<) with scalar","summary":"<p>Less than operator (&lt;) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":999,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L999"},"def":{"name":"<","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"lt(value)"}},{"html_id":"<=(other:Array(T)):Array(Bool)-instance-method","name":"<=","doc":"Less than or equal to operator (<=)","summary":"<p>Less than or equal to operator (&lt;=)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":974,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L974"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"le(other)"}},{"html_id":"<=(value:T):Array(Bool)-instance-method","name":"<=","doc":"Less than or equal to operator (<=) with scalar","summary":"<p>Less than or equal to operator (&lt;=) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":1004,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L1004"},"def":{"name":"<=","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"le(value)"}},{"html_id":"==(other:Array(T)):Array(Bool)-instance-method","name":"==","doc":"Equality operator (==)","summary":"<p>Equality operator (==)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":949,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L949"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"eq(other)"}},{"html_id":"==(value:T):Array(Bool)-instance-method","name":"==","doc":"Equality operator (==) with scalar","summary":"<p>Equality operator (==) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":979,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L979"},"def":{"name":"==","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"eq(value)"}},{"html_id":">(other:Array(T)):Array(Bool)-instance-method","name":">","doc":"Greater than operator (>)","summary":"<p>Greater than operator (&gt;)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":959,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L959"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"gt(other)"}},{"html_id":">(value:T):Array(Bool)-instance-method","name":">","doc":"Greater than operator (>) with scalar","summary":"<p>Greater than operator (&gt;) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":989,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L989"},"def":{"name":">","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"gt(value)"}},{"html_id":">=(other:Array(T)):Array(Bool)-instance-method","name":">=","doc":"Greater than or equal to operator (>=)","summary":"<p>Greater than or equal to operator (&gt;=)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":964,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L964"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"ge(other)"}},{"html_id":">=(value:T):Array(Bool)-instance-method","name":">=","doc":"Greater than or equal to operator (>=) with scalar","summary":"<p>Greater than or equal to operator (&gt;=) with scalar</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":994,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L994"},"def":{"name":">=","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"ge(value)"}},{"html_id":"[](indices:::Array(Int32)):T-instance-method","name":"[]","doc":"Returns the element at the given indices.\n\n```\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\narr[[0, 0]] # => 1\narr[[0, 1]] # => 2\narr[[1, 2]] # => 6\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Returns the element at the given indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"args_string":"(indices : ::Array(Int32)) : T","args_html":"(indices : ::Array(Int32)) : T","location":{"filename":"src/narray.cr","line_number":195,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L195"},"def":{"name":"[]","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"return_type":"T","visibility":"Public","body":"at(indices)"}},{"html_id":"[]=(indices:::Array(Int32),value:T)-instance-method","name":"[]=","doc":"Sets the element at the given indices.\n\n```\narr = Narray.zeros([2, 3], Int32)\narr[[0, 0]] = 1\narr[[0, 1]] = 2\narr[[1, 2]] = 3\narr.data # => [1, 2, 0, 0, 0, 3]\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Sets the element at the given indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(indices : ::Array(Int32), value : T)","args_html":"(indices : ::Array(Int32), value : T)","location":{"filename":"src/narray.cr","line_number":211,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L211"},"def":{"name":"[]=","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"at_set(indices, value)"}},{"html_id":"[]=(indices:::Array(SliceIndex),value:Array(T))-instance-method","name":"[]=","doc":"Sets a slice of the array using bracket notation with slice indices.\n\n```\narr = Narray.array([3, 4], (1..12).to_a)\nsub_arr = Narray.array([2, 2], [100, 200, 300, 400])\narr[[0..1, 0..1]] = sub_arr # Replace the top-left 2x2 submatrix\n```\n\nSee `#slice_set` for more details.","summary":"<p>Sets a slice of the array using bracket notation with slice indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"},{"name":"value","external_name":"value","restriction":"Array(T)"}],"args_string":"(indices : ::Array(SliceIndex), value : Array(T))","args_html":"(indices : ::Array(<a href=\"../Narray/Array/SliceIndex.html\">SliceIndex</a>), value : <a href=\"../Narray/Array.html\">Array</a>(T))","location":{"filename":"src/narray.cr","line_number":412,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L412"},"def":{"name":"[]=","args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"},{"name":"value","external_name":"value","restriction":"Array(T)"}],"visibility":"Public","body":"slice_set(indices, value)"}},{"html_id":"add!(other:Array(T)):self-instance-method","name":"add!","doc":"Performs element-wise addition of two arrays in-place.\n\nIf the shapes match exactly, adds corresponding elements in-place.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then adds corresponding elements in-place.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\na.add!(b)\na.data # => [6, 8, 10, 12]\n\n# Broadcasting example\na = Narray.array([2, 1], [1, 2])\nb = Narray.array([1, 3], [3, 4, 5])\na.add!(b)\na.shape # => [2, 3]\na.data  # => [4, 5, 6, 5, 6, 7]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#+`, `Array#subtract!`.","summary":"<p>Performs element-wise addition of two arrays in-place.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":119,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L119"},"def":{"name":"add!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_75 = i\n    @data[__temp_75] = @data[__temp_75] + other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_77 = i\n        __temp_78 = broadcasted_self.data\n        __temp_78[__temp_77] = __temp_78[__temp_77] + broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_79 = i\n        @data[__temp_79] = @data[__temp_79] + broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot add arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"add!(scalar:Number):self-instance-method","name":"add!","doc":"Performs element-wise addition of an array and a scalar in-place.\n\nAdds the scalar to each element of the array in-place.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\na.add!(5)\na.data # => [6, 7, 8, 9]\n```\n\nSee also: `Array#+`, `Array#subtract!`.","summary":"<p>Performs element-wise addition of an array and a scalar in-place.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":175,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L175"},"def":{"name":"add!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_81 = i\n  @data[__temp_81] = @data[__temp_81] + (T.new(scalar))\nend\nself\n"}},{"html_id":"at(indices:::Array(Int32)):T-instance-method","name":"at","doc":"Returns the element at the given indices.\n\n```\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\narr.at([0, 0]) # => 1\narr.at([0, 1]) # => 2\narr.at([1, 2]) # => 6\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Returns the element at the given indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"args_string":"(indices : ::Array(Int32)) : T","args_html":"(indices : ::Array(Int32)) : T","location":{"filename":"src/narray.cr","line_number":91,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L91"},"def":{"name":"at","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"return_type":"T","visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nindices.each_with_index do |idx, dim|\n  if idx < 0 || idx >= shape[dim]\n    raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{shape[dim]}\"))\n  end\nend\nflat_idx = indices_to_flat_index(indices)\ndata[flat_idx]\n"}},{"html_id":"at(*indices:Int32):T-instance-method","name":"at","doc":"Convenience method for accessing elements with variadic indices.\n\n```\narr = Narray.array([2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\narr.at(0, 1, 2) # => 7\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Convenience method for accessing elements with variadic indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"Int32"}],"args_string":"(*indices : Int32) : T","args_html":"(*indices : Int32) : T","location":{"filename":"src/narray.cr","line_number":118,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L118"},"def":{"name":"at","args":[{"name":"indices","external_name":"indices","restriction":"Int32"}],"splat_index":0,"return_type":"T","visibility":"Public","body":"at(indices.to_a)"}},{"html_id":"at_set(indices:::Array(Int32),value:T):self-instance-method","name":"at_set","doc":"Sets the element at the given indices.\n\n```\narr = Narray.zeros([2, 3], Int32)\narr.at_set([0, 0], 1)\narr.at_set([0, 1], 2)\narr.at_set([1, 2], 3)\narr.data # => [1, 2, 0, 0, 0, 3]\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Sets the element at the given indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(indices : ::Array(Int32), value : T) : self","args_html":"(indices : ::Array(Int32), value : T) : <span class=\"k\">self</span>","location":{"filename":"src/narray.cr","line_number":134,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L134"},"def":{"name":"at_set","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"return_type":"self","visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nindices.each_with_index do |idx, dim|\n  if idx < 0 || idx >= shape[dim]\n    raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{shape[dim]}\"))\n  end\nend\nflat_idx = indices_to_flat_index(indices)\ndata[flat_idx] = value\nself\n"}},{"html_id":"at_set(*args:Int32):self-instance-method","name":"at_set","doc":"Convenience method for setting elements with variadic indices.\n\n```\narr = Narray.zeros([2, 3], Int32)\narr.at_set(0, 0, 1)\narr.at_set(0, 1, 2)\narr.at_set(1, 2, 3)\narr.data # => [1, 2, 0, 0, 0, 3]\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Convenience method for setting elements with variadic indices.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":"Int32"}],"args_string":"(*args : Int32) : self","args_html":"(*args : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/narray.cr","line_number":165,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L165"},"def":{"name":"at_set","args":[{"name":"args","external_name":"args","restriction":"Int32"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"if args.size < 2\n  raise(ArgumentError.new(\"Wrong number of arguments (#{args.size} for at least 2)\"))\nend\nvalue = args.last\nindices = ::Array(Int32).new(args.size - 1)\n(0...(args.size - 1)).each do |i|\n  indices << args[i]\nend\nat_set(indices, value)\n"}},{"html_id":"broadcast_to(new_shape:::Array(Int32)):Array(T)-instance-method","name":"broadcast_to","doc":"Broadcasts this array to a new shape.\n\n```\narr = Narray.array([3], [1, 2, 3])\nresult = arr.broadcast_to([2, 3])\nresult.shape # => [2, 3]\nresult.data  # => [1, 2, 3, 1, 2, 3]\n```\n\nRaises `ArgumentError` if the shapes are incompatible for broadcasting.\n\nSee also: `Narray.broadcast`.","summary":"<p>Broadcasts this array to a new shape.</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : Array(T)","args_html":"(new_shape : ::Array(Int32)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/broadcast.cr","line_number":223,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/broadcast.cr#L223"},"def":{"name":"broadcast_to","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"Narray.broadcast(self, new_shape)"}},{"html_id":"data:::Array(T)-instance-method","name":"data","doc":"The underlying data storage.\n\nReturns a flat array containing all elements of the multi-dimensional array.\nElements are stored in row-major order (C-style).","summary":"<p>The underlying data storage.</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":38,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L38"},"def":{"name":"data","return_type":"::Array(T)","visibility":"Public","body":"@data"}},{"html_id":"divide!(other:Array(T)):self-instance-method","name":"divide!","doc":"Performs element-wise division of two arrays in-place.\n\nIf the shapes match exactly, divides corresponding elements in-place.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then divides corresponding elements in-place.\n\n```\na = Narray.array([2, 2], [10, 12, 14, 16])\nb = Narray.array([2, 2], [2, 3, 2, 4])\na.divide!(b)\na.data # => [5, 4, 7, 4]\n\n# Broadcasting example with floating-point division\na = Narray.array([2, 1], [6.0, 9.0])\nb = Narray.array([1, 3], [1.0, 2.0, 3.0])\na.divide!(b)\na.shape # => [2, 3]\na.data  # => [6.0, 3.0, 2.0, 9.0, 4.5, 3.0]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#/`, `Array#multiply!`.","summary":"<p>Performs element-wise division of two arrays in-place.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":625,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L625"},"def":{"name":"divide!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    @data[i] = T.new((@data[i] / other.data[i]).to_f)\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        value = (broadcasted_self.data[i].to_f64 / broadcasted_other.data[i].to_f64)\n        broadcasted_self.data[i] = T.new(value)\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        value = (@data[i].to_f64 / broadcasted_other.data[i].to_f64)\n        @data[i] = T.new(value)\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot divide arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"divide!(scalar:Number):self-instance-method","name":"divide!","doc":"Performs element-wise division of an array and a scalar in-place.\n\nDivides each element of the array by the scalar in-place.\n\n```\na = Narray.array([2, 2], [2, 4, 6, 8])\na.divide!(2)\na.data # => [1, 2, 3, 4]\n```\n\nSee also: `Array#/`, `Array#multiply!`.","summary":"<p>Performs element-wise division of an array and a scalar in-place.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":685,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L685"},"def":{"name":"divide!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  @data[i] = T.new((@data[i] / (T.new(scalar))).to_f)\nend\nself\n"}},{"html_id":"eq(other:Array(T)):Array(Bool)-instance-method","name":"eq","doc":"Returns a boolean mask for equality with another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [1, 3, 3])\nmask = a.eq(b)\nmask.data # => [true, false, true]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#ne`, `Array#==`.","summary":"<p>Returns a boolean mask for equality with another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":671,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L671"},"def":{"name":"eq","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] == b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"eq(value:T):Array(Bool)-instance-method","name":"eq","doc":"Returns a boolean mask for equality with a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 2, 1])\nmask = arr.eq(2)\nmask.data # => [false, true, false, true, false]\n```\n\nSee also: `Array#ne`, `Array#==`.","summary":"<p>Returns a boolean mask for equality with a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":649,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L649"},"def":{"name":"eq","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem == value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"ge(other:Array(T)):Array(Bool)-instance-method","name":"ge","doc":"Returns a boolean mask for greater than or equal to another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [0, 2, 4])\nmask = a.ge(b)\nmask.data # => [true, true, false]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#gt`, `Array#>=`.","summary":"<p>Returns a boolean mask for greater than or equal to another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":824,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L824"},"def":{"name":"ge","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] >= b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"ge(value:T):Array(Bool)-instance-method","name":"ge","doc":"Returns a boolean mask for greater than or equal to a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = arr.ge(3)\nmask.data # => [false, false, true, true, true]\n```\n\nSee also: `Array#gt`, `Array#>=`.","summary":"<p>Returns a boolean mask for greater than or equal to a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":802,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L802"},"def":{"name":"ge","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem >= value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"gt(other:Array(T)):Array(Bool)-instance-method","name":"gt","doc":"Returns a boolean mask for greater than another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [0, 2, 4])\nmask = a.gt(b)\nmask.data # => [true, false, false]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#ge`, `Array#>`.","summary":"<p>Returns a boolean mask for greater than another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":773,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L773"},"def":{"name":"gt","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] > b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"gt(value:T):Array(Bool)-instance-method","name":"gt","doc":"Returns a boolean mask for greater than a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = arr.gt(3)\nmask.data # => [false, false, false, true, true]\n```\n\nSee also: `Array#ge`, `Array#>`.","summary":"<p>Returns a boolean mask for greater than a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":751,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L751"},"def":{"name":"gt","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem > value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Returns a detailed string representation of the array for debugging.\n\nFor small arrays (size <= 20), all elements are shown.\nFor large arrays, only the first 10 and last 10 elements are shown.\n\n```\narr = Narray.array([2, 2], [1, 2, 3, 4])\narr.inspect # => \"Narray::Array(Int32)[shape=[2, 2], ndim=2, size=4, data=[1, 2, 3, 4]]\"\n```","summary":"<p>Returns a detailed string representation of the array for debugging.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/narray.cr","line_number":459,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L459"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"Narray::Array(\"\nio << T.name\nio << \")[\"\nio << \"shape=\"\nio << shape.inspect\nio << \", \"\nio << \"ndim=\"\nio << ndim\nio << \", \"\nio << \"size=\"\nio << size\nio << \", \"\nio << \"data=\"\nif size <= 20\n  io << data.inspect\nelse\n  first_elements = data[0...10]\n  last_elements = data[(size - 10)...size]\n  io << \"[\"\n  first_elements.each_with_index do |elem, i|\n    io << elem\n    if i < (first_elements.size - 1)\n      io << \", \"\n    end\n  end\n  io << \", ... (#{size - 20} more elements) ... , \"\n  last_elements.each_with_index do |elem, i|\n    io << elem\n    if i < (last_elements.size - 1)\n      io << \", \"\n    end\n  end\n  io << \"]\"\nend\nio << \"]\"\n"}},{"html_id":"le(other:Array(T)):Array(Bool)-instance-method","name":"le","doc":"Returns a boolean mask for less than or equal to another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [0, 2, 4])\nmask = a.le(b)\nmask.data # => [false, true, true]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#lt`, `Array#<=`.","summary":"<p>Returns a boolean mask for less than or equal to another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":926,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L926"},"def":{"name":"le","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] <= b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"le(value:T):Array(Bool)-instance-method","name":"le","doc":"Returns a boolean mask for less than or equal to a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = arr.le(3)\nmask.data # => [true, true, true, false, false]\n```\n\nSee also: `Array#lt`, `Array#<=`.","summary":"<p>Returns a boolean mask for less than or equal to a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":904,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L904"},"def":{"name":"le","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem <= value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"lt(other:Array(T)):Array(Bool)-instance-method","name":"lt","doc":"Returns a boolean mask for less than another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [0, 2, 4])\nmask = a.lt(b)\nmask.data # => [false, false, true]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#le`, `Array#<`.","summary":"<p>Returns a boolean mask for less than another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":875,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L875"},"def":{"name":"lt","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] < b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"lt(value:T):Array(Bool)-instance-method","name":"lt","doc":"Returns a boolean mask for less than a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = arr.lt(3)\nmask.data # => [true, true, false, false, false]\n```\n\nSee also: `Array#le`, `Array#<`.","summary":"<p>Returns a boolean mask for less than a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":853,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L853"},"def":{"name":"lt","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem < value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"mask(mask:Array(Bool)):Array(T)-instance-method","name":"mask","doc":"Returns a new array containing only the elements where the mask is true.\n\nThe mask must be a boolean array with the same shape as the original array.\nThe result is a 1D array containing only the elements where the mask is true.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = Narray.array([5], [true, false, true, false, true])\nresult = arr.mask(mask)\nresult.shape # => [3]\nresult.data  # => [1, 3, 5]\n```\n\nRaises `ArgumentError` if the mask shape does not match the array shape.\n\nSee also: `Array#mask_set`, `Array#mask(&block)`.","summary":"<p>Returns a new array containing only the elements where the mask is true.</p>","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"}],"args_string":"(mask : Array(Bool)) : Array(T)","args_html":"(mask : <a href=\"../Narray/Array.html\">Array</a>(Bool)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/operations.cr","line_number":247,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L247"},"def":{"name":"mask","args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"}],"return_type":"Array(T)","visibility":"Public","body":"if mask.shape != shape\n  raise(ArgumentError.new(\"Mask shape #{mask.shape} does not match array shape #{shape}\"))\nend\ntrue_count = mask.data.count do |v|\n  v\nend\nnew_data = ::Array(T).new(true_count)\nsize.times do |i|\n  if mask.data[i]\n    new_data << data[i]\n  end\nend\nArray(T).new([true_count], new_data)\n"}},{"html_id":"mask(&block:T->Bool):Array(T)-instance-method","name":"mask","doc":"Returns a new array containing only the elements that satisfy the given condition.\n\nThe condition is specified as a block that takes an element and returns a boolean.\nThe result is a 1D array containing only the elements where the block returns true.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nresult = arr.mask { |x| x > 2 }\nresult.shape # => [3]\nresult.data  # => [3, 4, 5]\n```\n\nSee also: `Array#mask(mask)`, `Array#mask_set`.","summary":"<p>Returns a new array containing only the elements that satisfy the given condition.</p>","abstract":false,"location":{"filename":"src/narray/operations.cr","line_number":283,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L283"},"def":{"name":"mask","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> Bool)"},"return_type":"Array(T)","visibility":"Public","body":"mask_data = ::Array(Bool).new(size)\ndata.each do |value|\n  mask_data << (block.call(value))\nend\nmask_array = Array(Bool).new(shape.dup, mask_data)\nmask(mask_array)\n"}},{"html_id":"mask_set(mask:Array(Bool),values:Array(T)):self-instance-method","name":"mask_set","doc":"Updates elements in the array where the mask is true with values from another array.\n\nThe mask must be a boolean array with the same shape as the original array.\nThe values array must have the same number of elements as there are true values in the mask.\nThe array is modified in-place.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = Narray.array([5], [true, false, true, false, true])\nvalues = Narray.array([3], [10, 20, 30])\narr.mask_set(mask, values)\narr.data # => [10, 2, 20, 4, 30]\n```\n\nRaises `ArgumentError` if the mask shape does not match the array shape.\nRaises `ArgumentError` if the values array does not have the correct number of elements.\n\nSee also: `Array#mask`, `Array#mask_set(mask, value)`.","summary":"<p>Updates elements in the array where the mask is true with values from another array.</p>","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"},{"name":"values","external_name":"values","restriction":"Array(T)"}],"args_string":"(mask : Array(Bool), values : Array(T)) : self","args_html":"(mask : <a href=\"../Narray/Array.html\">Array</a>(Bool), values : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/operations.cr","line_number":344,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L344"},"def":{"name":"mask_set","args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"},{"name":"values","external_name":"values","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if mask.shape != shape\n  raise(ArgumentError.new(\"Mask shape #{mask.shape} does not match array shape #{shape}\"))\nend\ntrue_count = mask.data.count do |v|\n  v\nend\nif values.size != true_count\n  raise(ArgumentError.new(\"Values array size (#{values.size}) does not match the number of true values in the mask (#{true_count})\"))\nend\nvalue_index = 0\nsize.times do |i|\n  if mask.data[i]\n    @data[i] = values.data[value_index]\n    value_index = value_index + 1\n  end\nend\nself\n"}},{"html_id":"mask_set(mask:Array(Bool),value:T):self-instance-method","name":"mask_set","doc":"Updates elements in the array where the mask is true with the given value.\n\nThe mask must be a boolean array with the same shape as the original array.\nThe array is modified in-place.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\nmask = Narray.array([5], [true, false, true, false, true])\narr.mask_set(mask, 0)\narr.data # => [0, 2, 0, 4, 0]\n```\n\nRaises `ArgumentError` if the mask shape does not match the array shape.\n\nSee also: `Array#mask`, `Array#mask_set(&block)`.","summary":"<p>Updates elements in the array where the mask is true with the given value.</p>","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(mask : Array(Bool), value : T) : self","args_html":"(mask : <a href=\"../Narray/Array.html\">Array</a>(Bool), value : T) : <span class=\"k\">self</span>","location":{"filename":"src/narray/operations.cr","line_number":310,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L310"},"def":{"name":"mask_set","args":[{"name":"mask","external_name":"mask","restriction":"Array(Bool)"},{"name":"value","external_name":"value","restriction":"T"}],"return_type":"self","visibility":"Public","body":"if mask.shape != shape\n  raise(ArgumentError.new(\"Mask shape #{mask.shape} does not match array shape #{shape}\"))\nend\nsize.times do |i|\n  if mask.data[i]\n    @data[i] = value\n  end\nend\nself\n"}},{"html_id":"mask_set(value:T,&block:T->Bool):self-instance-method","name":"mask_set","doc":"Updates elements in the array that satisfy the given condition with the given value.\n\nThe condition is specified as a block that takes an element and returns a boolean.\nThe array is modified in-place.\n\n```\narr = Narray.array([5], [1, 2, 3, 4, 5])\narr.mask_set(0) { |x| x > 2 }\narr.data # => [1, 2, 0, 0, 0]\n```\n\nSee also: `Array#mask`, `Array#mask_set(mask, value)`.","summary":"<p>Updates elements in the array that satisfy the given condition with the given value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T, &block : T -> Bool) : self","args_html":"(value : T, &block : T -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/narray/operations.cr","line_number":382,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L382"},"def":{"name":"mask_set","args":[{"name":"value","external_name":"value","restriction":"T"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> Bool)"},"return_type":"self","visibility":"Public","body":"mask_data = ::Array(Bool).new(size)\ndata.each do |val|\n  mask_data << (block.call(val))\nend\nmask_array = Array(Bool).new(shape.dup, mask_data)\nmask_set(mask_array, value)\n"}},{"html_id":"max:T-instance-method","name":"max","doc":"Returns the maximum value in the array.\n\n```\na = Narray.array([2, 2], [3, 1, 4, 2])\na.max # => 4\n```\n\nSee also: `Array#min`, `Array#sum`.","summary":"<p>Returns the maximum value in the array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":760,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L760"},"def":{"name":"max","return_type":"T","visibility":"Public","body":"data.max"}},{"html_id":"mean:Float64-instance-method","name":"mean","doc":"Computes the mean (average) of all elements in the array.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\na.mean # => 2.5\n```\n\nSee also: `Array#sum`, `Array#std`.","summary":"<p>Computes the mean (average) of all elements in the array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":736,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L736"},"def":{"name":"mean","return_type":"Float64","visibility":"Public","body":"sum.to_f / size"}},{"html_id":"min:T-instance-method","name":"min","doc":"Returns the minimum value in the array.\n\n```\na = Narray.array([2, 2], [3, 1, 4, 2])\na.min # => 1\n```\n\nSee also: `Array#max`, `Array#sum`.","summary":"<p>Returns the minimum value in the array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":748,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L748"},"def":{"name":"min","return_type":"T","visibility":"Public","body":"data.min"}},{"html_id":"multiply!(other:Array(T)):self-instance-method","name":"multiply!","doc":"Performs element-wise multiplication of two arrays in-place.\n\nIf the shapes match exactly, multiplies corresponding elements in-place.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then multiplies corresponding elements in-place.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\na.multiply!(b)\na.data # => [5, 12, 21, 32]\n\n# Broadcasting example\na = Narray.array([2, 1], [2, 3])\nb = Narray.array([1, 3], [1, 2, 3])\na.multiply!(b)\na.shape # => [2, 3]\na.data  # => [2, 4, 6, 3, 6, 9]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#*`, `Array#divide!`.","summary":"<p>Performs element-wise multiplication of two arrays in-place.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":455,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L455"},"def":{"name":"multiply!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_91 = i\n    @data[__temp_91] = @data[__temp_91] * other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_93 = i\n        __temp_94 = broadcasted_self.data\n        __temp_94[__temp_93] = __temp_94[__temp_93] * broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_95 = i\n        @data[__temp_95] = @data[__temp_95] * broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot multiply arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"multiply!(scalar:Number):self-instance-method","name":"multiply!","doc":"Performs element-wise multiplication of an array and a scalar in-place.\n\nMultiplies each element of the array by the scalar in-place.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\na.multiply!(2)\na.data # => [2, 4, 6, 8]\n```\n\nSee also: `Array#*`, `Array#divide!`.","summary":"<p>Performs element-wise multiplication of an array and a scalar in-place.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":511,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L511"},"def":{"name":"multiply!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_97 = i\n  @data[__temp_97] = @data[__temp_97] * (T.new(scalar))\nend\nself\n"}},{"html_id":"ndim:Int32-instance-method","name":"ndim","doc":"Returns the number of dimensions of the array.\n\n```\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\narr.ndim # => 2\n```","summary":"<p>Returns the number of dimensions of the array.</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":66,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L66"},"def":{"name":"ndim","return_type":"Int32","visibility":"Public","body":"shape.size"}},{"html_id":"ne(other:Array(T)):Array(Bool)-instance-method","name":"ne","doc":"Returns a boolean mask for inequality with another array.\n\nThe arrays must be broadcast compatible.\n\n```\na = Narray.array([3], [1, 2, 3])\nb = Narray.array([3], [1, 3, 3])\nmask = a.ne(b)\nmask.data # => [false, true, false]\n```\n\nRaises `ArgumentError` if the arrays cannot be broadcast together.\n\nSee also: `Array#eq`, `Array#!=`.","summary":"<p>Returns a boolean mask for inequality with another array.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(Bool)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":722,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L722"},"def":{"name":"ne","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(Bool)","visibility":"Public","body":"broadcast_shape = Narray.broadcast_shapes(shape, other.shape)\nif broadcast_shape.nil?\n  raise(ArgumentError.new(\"Cannot broadcast arrays with shapes #{shape} and #{other.shape}\"))\nend\na = self.broadcast_to(broadcast_shape)\nb = other.broadcast_to(broadcast_shape)\nresult_data = ::Array(Bool).new(a.size)\na.size.times do |i|\n  result_data << (a.data[i] != b.data[i])\nend\nArray(Bool).new(broadcast_shape, result_data)\n"}},{"html_id":"ne(value:T):Array(Bool)-instance-method","name":"ne","doc":"Returns a boolean mask for inequality with a value.\n\n```\narr = Narray.array([5], [1, 2, 3, 2, 1])\nmask = arr.ne(2)\nmask.data # => [true, false, true, false, true]\n```\n\nSee also: `Array#eq`, `Array#!=`.","summary":"<p>Returns a boolean mask for inequality with a value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(value : T) : Array(Bool)","args_html":"(value : T) : <a href=\"../Narray/Array.html\">Array</a>(Bool)","location":{"filename":"src/narray/operations.cr","line_number":700,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L700"},"def":{"name":"ne","args":[{"name":"value","external_name":"value","restriction":"T"}],"return_type":"Array(Bool)","visibility":"Public","body":"result_data = ::Array(Bool).new(size)\ndata.each do |elem|\n  result_data << (elem != value)\nend\nArray(Bool).new(shape.dup, result_data)\n"}},{"html_id":"reshape(new_shape:::Array(Int32)):Array(T)-instance-method","name":"reshape","doc":"Reshapes the array to the new shape.\n\nThe total number of elements must remain the same.\nReturns a new array with the same data but new shape.\n\n```\narr = Narray.arange(0, 6)\nreshaped = arr.reshape([2, 3])\nreshaped.shape # => [2, 3]\nreshaped.ndim  # => 2\nreshaped.size  # => 6\nreshaped.data  # => [0, 1, 2, 3, 4, 5]\n\narr2 = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nreshaped2 = arr2.reshape([6])\nreshaped2.shape # => [6]\nreshaped2.ndim  # => 1\n```\n\nRaises `ArgumentError` if the new shape has a different number of elements.\n\nSee also: `Array#reshape!`.","summary":"<p>Reshapes the array to the new shape.</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : Array(T)","args_html":"(new_shape : ::Array(Int32)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/operations.cr","line_number":32,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L32"},"def":{"name":"reshape","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"new_size = new_shape.product\nif new_size != size\n  raise(ArgumentError.new(\"Cannot reshape array of size #{size} into shape #{new_shape} with size #{new_size}\"))\nend\nArray(T).new(new_shape, data.dup)\n"}},{"html_id":"reshape!(new_shape:::Array(Int32)):self-instance-method","name":"reshape!","doc":"Reshapes the array to the new shape in-place.\n\nThe total number of elements must remain the same.\nModifies the array's shape in-place, keeping the same data.\n\n```\narr = Narray.arange(0, 6)\narr.reshape!([2, 3])\narr.shape # => [2, 3]\narr.ndim  # => 2\narr.size  # => 6\narr.data  # => [0, 1, 2, 3, 4, 5]\n```\n\nRaises `ArgumentError` if the new shape has a different number of elements.\n\nSee also: `Array#reshape`.","summary":"<p>Reshapes the array to the new shape in-place.</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : self","args_html":"(new_shape : ::Array(Int32)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/operations.cr","line_number":60,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L60"},"def":{"name":"reshape!","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"self","visibility":"Public","body":"new_size = new_shape.product\nif new_size != size\n  raise(ArgumentError.new(\"Cannot reshape array of size #{size} into shape #{new_shape} with size #{new_size}\"))\nend\n@shape = new_shape.dup\nself\n"}},{"html_id":"shape:::Array(Int32)-instance-method","name":"shape","doc":"The shape of the array (dimensions).\n\nReturns an array of integers representing the size of each dimension.\nFor example, a 2x3 array would have a shape of [2, 3].","summary":"<p>The shape of the array (dimensions).</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":32,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L32"},"def":{"name":"shape","return_type":"::Array(Int32)","visibility":"Public","body":"@shape"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the total number of elements in the array.\n\n```\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\narr.size # => 6\n```","summary":"<p>Returns the total number of elements in the array.</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":76,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L76"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"data.size"}},{"html_id":"slice(indices:::Array(SliceIndex)):Array(T)-instance-method","name":"slice","doc":"Returns a slice of the array based on the given indices.\n\nEach index can be:\n- An integer: selects a single element along that dimension\n- A range: selects a range of elements along that dimension\n- A boolean (true): selects all elements along that dimension\n\n```\narr = Narray.array([3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\narr.slice([0..1, 1..2]) # => 2D array with elements at positions (0,1), (0,2), (1,1), (1,2)\narr.slice([0, true])    # => 1D array with all elements in the first row\narr.slice([true, 2])    # => 1D array with elements at column index 2\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.","summary":"<p>Returns a slice of the array based on the given indices.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"}],"args_string":"(indices : ::Array(SliceIndex)) : Array(T)","args_html":"(indices : ::Array(<a href=\"../Narray/Array/SliceIndex.html\">SliceIndex</a>)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray.cr","line_number":234,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L234"},"def":{"name":"slice","args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"}],"return_type":"Array(T)","visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nnew_shape = ::Array(Int32).new\nranges = ::Array(Range(Int32, Int32)).new\nindices.each_with_index do |idx, dim|\n  dim_size = shape[dim]\n  case idx\n  when Int32\n    actual_idx = idx < 0 ? dim_size + idx : idx\n    if actual_idx < 0 || actual_idx >= dim_size\n      raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{dim_size}\"))\n    end\n    new_shape << 1\n    ranges << (actual_idx..actual_idx)\n  when Range(Int32, Int32)\n    begin_idx = idx.begin < 0 ? dim_size + idx.begin : idx.begin\n    end_idx = idx.end < 0 ? dim_size + idx.end : idx.end\n    if ((begin_idx < 0 || begin_idx >= dim_size) || end_idx < 0) || end_idx >= dim_size\n      raise(IndexError.new(\"Range #{idx} is out of bounds for dimension #{dim} with size #{dim_size}\"))\n    end\n    adjusted_range = idx.exclusive? ? (begin_idx...end_idx) : (begin_idx..end_idx)\n    size = (end_idx - begin_idx) + (idx.exclusive? ? 0 : 1)\n    new_shape << size\n    ranges << adjusted_range\n  when Bool\n    if idx\n      new_shape << dim_size\n      ranges << (0...dim_size)\n    else\n      raise(ArgumentError.new(\"Boolean index must be true (false not supported)\"))\n    end\n  end\nend\nnew_data = ::Array(T).new(new_shape.product)\ngenerate_indices_combinations(ranges) do |indices|\n  flat_idx = indices_to_flat_index(indices)\n  new_data << data[flat_idx]\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"slice_set(indices:::Array(SliceIndex),value:Array(T)):self-instance-method","name":"slice_set","doc":"Sets a slice of the array to the given value.\n\nEach index can be:\n- An integer: selects a single element along that dimension\n- A range: selects a range of elements along that dimension\n- A boolean (true): selects all elements along that dimension\n\n```\narr = Narray.array([3, 4], (1..12).to_a)\nsub_arr = Narray.array([2, 2], [100, 200, 300, 400])\narr.slice_set([0..1, 0..1], sub_arr) # Replace the top-left 2x2 submatrix\n```\n\nRaises `IndexError` if the number of indices does not match the number of dimensions.\nRaises `IndexError` if any index is out of bounds.\nRaises `ArgumentError` if the shape of the value does not match the shape of the slice.","summary":"<p>Sets a slice of the array to the given value.</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"},{"name":"value","external_name":"value","restriction":"Array(T)"}],"args_string":"(indices : ::Array(SliceIndex), value : Array(T)) : self","args_html":"(indices : ::Array(<a href=\"../Narray/Array/SliceIndex.html\">SliceIndex</a>), value : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray.cr","line_number":333,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L333"},"def":{"name":"slice_set","args":[{"name":"indices","external_name":"indices","restriction":"::Array(SliceIndex)"},{"name":"value","external_name":"value","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nslice_shape = ::Array(Int32).new\nranges = ::Array(Range(Int32, Int32)).new\nindices.each_with_index do |idx, dim|\n  dim_size = shape[dim]\n  case idx\n  when Int32\n    actual_idx = idx < 0 ? dim_size + idx : idx\n    if actual_idx < 0 || actual_idx >= dim_size\n      raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{dim_size}\"))\n    end\n    slice_shape << 1\n    ranges << (actual_idx..actual_idx)\n  when Range(Int32, Int32)\n    begin_idx = idx.begin < 0 ? dim_size + idx.begin : idx.begin\n    end_idx = idx.end < 0 ? dim_size + idx.end : idx.end\n    if ((begin_idx < 0 || begin_idx >= dim_size) || end_idx < 0) || end_idx >= dim_size\n      raise(IndexError.new(\"Range #{idx} is out of bounds for dimension #{dim} with size #{dim_size}\"))\n    end\n    adjusted_range = idx.exclusive? ? (begin_idx...end_idx) : (begin_idx..end_idx)\n    size = (end_idx - begin_idx) + (idx.exclusive? ? 0 : 1)\n    slice_shape << size\n    ranges << adjusted_range\n  when Bool\n    if idx\n      slice_shape << dim_size\n      ranges << (0...dim_size)\n    else\n      raise(ArgumentError.new(\"Boolean index must be true (false not supported)\"))\n    end\n  end\nend\nif value.shape != slice_shape\n  raise(ArgumentError.new(\"Value shape #{value.shape} does not match slice shape #{slice_shape}\"))\nend\nvalue_index = 0\ngenerate_indices_combinations(ranges) do |indices|\n  flat_idx = indices_to_flat_index(indices)\n  data[flat_idx] = value.data[value_index]\n  value_index = value_index + 1\nend\nself\n"}},{"html_id":"std:Float64-instance-method","name":"std","doc":"Computes the standard deviation of all elements in the array.\n\nThe standard deviation is a measure of the amount of variation or dispersion of a set of values.\nA low standard deviation indicates that the values tend to be close to the mean,\nwhile a high standard deviation indicates that the values are spread out over a wider range.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\na.std # => 1.118... (approximately)\n```\n\nSee also: `Array#mean`, `Array#sum`.","summary":"<p>Computes the standard deviation of all elements in the array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":776,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L776"},"def":{"name":"std","return_type":"Float64","visibility":"Public","body":"m = mean\nvariance = data.sum do |x|\n  (x.to_f - m) ** 2\nend / size\n::Math.sqrt(variance)\n"}},{"html_id":"subtract!(other:Array(T)):self-instance-method","name":"subtract!","doc":"Performs element-wise subtraction of two arrays in-place.\n\nIf the shapes match exactly, subtracts corresponding elements in-place.\nIf the shapes are compatible for broadcasting, broadcasts the arrays to a common shape\nand then subtracts corresponding elements in-place.\n\n```\na = Narray.array([2, 2], [5, 6, 7, 8])\nb = Narray.array([2, 2], [1, 2, 3, 4])\na.subtract!(b)\na.data # => [4, 4, 4, 4]\n\n# Broadcasting example\na = Narray.array([2, 1], [5, 10])\nb = Narray.array([1, 3], [1, 2, 3])\na.subtract!(b)\na.shape # => [2, 3]\na.data  # => [4, 3, 2, 9, 8, 7]\n```\n\nRaises `ArgumentError` if the shapes are not compatible for broadcasting.\n\nSee also: `Array#-`, `Array#add!`.","summary":"<p>Performs element-wise subtraction of two arrays in-place.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":287,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L287"},"def":{"name":"subtract!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_83 = i\n    @data[__temp_83] = @data[__temp_83] - other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_85 = i\n        __temp_86 = broadcasted_self.data\n        __temp_86[__temp_85] = __temp_86[__temp_85] - broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_87 = i\n        @data[__temp_87] = @data[__temp_87] - broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot subtract arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"subtract!(scalar:Number):self-instance-method","name":"subtract!","doc":"Performs element-wise subtraction of an array and a scalar in-place.\n\nSubtracts the scalar from each element of the array in-place.\n\n```\na = Narray.array([2, 2], [5, 6, 7, 8])\na.subtract!(3)\na.data # => [2, 3, 4, 5]\n```\n\nSee also: `Array#-`, `Array#add!`.","summary":"<p>Performs element-wise subtraction of an array and a scalar in-place.</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":343,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L343"},"def":{"name":"subtract!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_89 = i\n  @data[__temp_89] = @data[__temp_89] - (T.new(scalar))\nend\nself\n"}},{"html_id":"sum:T-instance-method","name":"sum","doc":"Computes the sum of all elements in the array.\n\n```\na = Narray.array([2, 2], [1, 2, 3, 4])\na.sum # => 10\n```\n\nSee also: `Array#mean`, `Array#min`, `Array#max`.","summary":"<p>Computes the sum of all elements in the array.</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":724,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math.cr#L724"},"def":{"name":"sum","return_type":"T","visibility":"Public","body":"data.sum"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Returns a string representation of the array.\n\n```\narr = Narray.array([2, 2], [1, 2, 3, 4])\narr.to_s # => \"Narray.array([2, 2], [1, 2, 3, 4])\"\n```","summary":"<p>Returns a string representation of the array.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/narray.cr","line_number":442,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L442"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"Narray.array(\"\nio << shape.inspect\nio << \", \"\nio << data.inspect\nio << \")\"\n"}},{"html_id":"transpose:Array(T)-instance-method","name":"transpose","doc":"Returns the transpose of the array.\n\nFor 1D arrays, this returns a copy of the array.\nFor 2D arrays, this swaps rows and columns.\nFor higher dimensions, this reverses the order of dimensions.\n\n```\n# 1D array\narr = Narray.arange(0, 3)\ntransposed = arr.transpose\ntransposed.shape # => [3]\ntransposed.data  # => [0, 1, 2]\n\n# 2D array\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\ntransposed = arr.transpose\ntransposed.shape # => [3, 2]\ntransposed.data  # => [1, 4, 2, 5, 3, 6]\n\n# 3D array\narr = Narray.array([2, 2, 2], [1, 2, 3, 4, 5, 6, 7, 8])\ntransposed = arr.transpose\ntransposed.shape # => [2, 2, 2]\ntransposed.data  # => [1, 5, 3, 7, 2, 6, 4, 8]\n```\n\nSee also: `Array#transpose!`.","summary":"<p>Returns the transpose of the array.</p>","abstract":false,"location":{"filename":"src/narray/operations.cr","line_number":99,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L99"},"def":{"name":"transpose","return_type":"Array(T)","visibility":"Public","body":"case ndim\nwhen 0, 1\n  Array(T).new(shape.dup, data.dup)\nwhen 2\n  rows, cols = shape\n  new_shape = [cols, rows]\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  rows.times do |i|\n    cols.times do |j|\n      new_data[(j * rows) + i] = data[(i * cols) + j]\n    end\n  end\n  Array(T).new(new_shape, new_data)\nelse\n  new_shape = shape.reverse\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  indices = ::Array(Int32).new(ndim, 0)\n  size.times do |i|\n    flat_idx = i\n    stride = 1\n    indices.size.times do |dim|\n      indices[dim] = (flat_idx // stride) % shape[dim]\n      stride = stride * shape[dim]\n    end\n    reversed_indices = indices.reverse\n    new_flat_idx = 0\n    stride = 1\n    reversed_indices.size.times do |dim|\n      new_flat_idx = new_flat_idx + (reversed_indices[dim] * stride)\n      stride = stride * new_shape[dim]\n    end\n    new_data[new_flat_idx] = data[i]\n  end\n  Array(T).new(new_shape, new_data)\nend"}},{"html_id":"transpose!:self-instance-method","name":"transpose!","doc":"Transposes the array in-place.\n\nFor 1D arrays, this does nothing.\nFor 2D arrays, this swaps rows and columns.\nFor higher dimensions, this reverses the order of dimensions.\nNote: This method creates a new data array and updates the shape.\n\n```\n# 1D array - no change\narr = Narray.arange(0, 3)\narr.transpose!\narr.shape # => [3]\narr.data  # => [0, 1, 2]\n\n# 2D array\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\narr.transpose!\narr.shape # => [3, 2]\narr.data  # => [1, 4, 2, 5, 3, 6]\n```\n\nSee also: `Array#transpose`.","summary":"<p>Transposes the array in-place.</p>","abstract":false,"location":{"filename":"src/narray/operations.cr","line_number":173,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/operations.cr#L173"},"def":{"name":"transpose!","return_type":"self","visibility":"Public","body":"case ndim\nwhen 0, 1\n  return self\nwhen 2\n  rows, cols = shape\n  new_shape = [cols, rows]\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  rows.times do |i|\n    cols.times do |j|\n      new_data[(j * rows) + i] = data[(i * cols) + j]\n    end\n  end\n  @shape = new_shape\n  @data = new_data\nelse\n  new_shape = shape.reverse\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  indices = ::Array(Int32).new(ndim, 0)\n  size.times do |i|\n    flat_idx = i\n    stride = 1\n    indices.size.times do |dim|\n      indices[dim] = (flat_idx // stride) % shape[dim]\n      stride = stride * shape[dim]\n    end\n    reversed_indices = indices.reverse\n    new_flat_idx = 0\n    stride = 1\n    reversed_indices.size.times do |dim|\n      new_flat_idx = new_flat_idx + (reversed_indices[dim] * stride)\n      stride = stride * new_shape[dim]\n    end\n    new_data[new_flat_idx] = data[i]\n  end\n  @shape = new_shape\n  @data = new_data\nend\nself\n"}}],"types":[{"html_id":"narray/Narray/Array/SliceIndex","path":"Narray/Array/SliceIndex.html","kind":"alias","full_name":"Narray::Array::SliceIndex","name":"SliceIndex","abstract":false,"locations":[{"filename":"src/narray.cr","line_number":216,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray.cr#L216"}],"repository_name":"narray","program":false,"enum":false,"alias":true,"aliased":"(Bool | Int32 | Range(Int32, Int32))","aliased_html":"Bool | Int32 | Range(Int32, Int32)","const":false,"namespace":{"html_id":"narray/Narray/Array","kind":"class","full_name":"Narray::Array(T)","name":"Array"},"doc":"Type alias for slice indices","summary":"<p>Type alias for slice indices</p>"}]},{"html_id":"narray/Narray/Math","path":"Narray/Math.html","kind":"module","full_name":"Narray::Math","name":"Math","abstract":false,"locations":[{"filename":"src/narray/math/exponential.cr","line_number":3,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L3"},{"filename":"src/narray/math/hyperbolic.cr","line_number":3,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L3"},{"filename":"src/narray/math/trig.cr","line_number":3,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L3"}],"repository_name":"narray","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"narray/Narray","kind":"module","full_name":"Narray","name":"Narray"},"doc":"Exponential and logarithmic functions module","summary":"<p>Exponential and logarithmic functions module</p>","class_methods":[{"html_id":"acos(arr:Array(T)):Array(Float64)forallT-class-method","name":"acos","doc":"Computes the arc cosine (inverse cosine) of each element in the array.\n\n```\na = Narray.array([2, 2], [1.0, 0.7071, 0.5, 0.0])\nb = Narray::Math.acos(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.7854, 1.0472, 1.5708] (approximately)\n```","summary":"<p>Computes the arc cosine (inverse cosine) of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":156,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L156"},"def":{"name":"acos","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.acos(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"acos!(arr:Array(T)):Array(T)forallT-class-method","name":"acos!","doc":"Computes the arc cosine (inverse cosine) of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [1.0, 0.7071, 0.5, 0.0])\nNarray::Math.acos!(a)\na.data # => [0.0, 0.7854, 1.0472, 1.5708] (approximately)\n```","summary":"<p>Computes the arc cosine (inverse cosine) of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":175,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L175"},"def":{"name":"acos!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.acos(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"asin(arr:Array(T)):Array(Float64)forallT-class-method","name":"asin","doc":"Computes the arc sine (inverse sine) of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 0.7071, 1.0])\nb = Narray::Math.asin(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.5236, 0.7854, 1.5708] (approximately)\n```","summary":"<p>Computes the arc sine (inverse sine) of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":120,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L120"},"def":{"name":"asin","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.asin(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"asin!(arr:Array(T)):Array(T)forallT-class-method","name":"asin!","doc":"Computes the arc sine (inverse sine) of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 0.7071, 1.0])\nNarray::Math.asin!(a)\na.data # => [0.0, 0.5236, 0.7854, 1.5708] (approximately)\n```","summary":"<p>Computes the arc sine (inverse sine) of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":139,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L139"},"def":{"name":"asin!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.asin(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"atan(arr:Array(T)):Array(Float64)forallT-class-method","name":"atan","doc":"Computes the arc tangent (inverse tangent) of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 1.0, 1.7321, 10.0])\nb = Narray::Math.atan(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.7854, 1.0472, 1.4711] (approximately)\n```","summary":"<p>Computes the arc tangent (inverse tangent) of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":192,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L192"},"def":{"name":"atan","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.atan(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"atan!(arr:Array(T)):Array(T)forallT-class-method","name":"atan!","doc":"Computes the arc tangent (inverse tangent) of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 1.0, 1.7321, 10.0])\nNarray::Math.atan!(a)\na.data # => [0.0, 0.7854, 1.0472, 1.4711] (approximately)\n```","summary":"<p>Computes the arc tangent (inverse tangent) of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":211,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L211"},"def":{"name":"atan!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.atan(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"cos(arr:Array(T)):Array(Float64)forallT-class-method","name":"cos","doc":"Computes the cosine of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/2, Math::PI, 3*Math::PI/2])\nb = Narray::Math.cos(a)\nb.shape # => [2, 2]\nb.data  # => [1.0, 0.0, -1.0, 0.0] (approximately)\n```","summary":"<p>Computes the cosine of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":48,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L48"},"def":{"name":"cos","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.cos(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"cos!(arr:Array(T)):Array(T)forallT-class-method","name":"cos!","doc":"Computes the cosine of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/2, Math::PI, 3*Math::PI/2])\nNarray::Math.cos!(a)\na.data # => [1.0, 0.0, -1.0, 0.0] (approximately)\n```","summary":"<p>Computes the cosine of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":67,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L67"},"def":{"name":"cos!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.cos(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"cosh(arr:Array(T)):Array(Float64)forallT-class-method","name":"cosh","doc":"Computes the hyperbolic cosine of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nb = Narray::Math.cosh(a)\nb.shape # => [2, 2]\nb.data  # => [1.0, 1.1276, 1.5431, 3.7622] (approximately)\n```","summary":"<p>Computes the hyperbolic cosine of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":48,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L48"},"def":{"name":"cosh","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.cosh(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"cosh!(arr:Array(T)):Array(T)forallT-class-method","name":"cosh!","doc":"Computes the hyperbolic cosine of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nNarray::Math.cosh!(a)\na.data # => [1.0, 1.1276, 1.5431, 3.7622] (approximately)\n```","summary":"<p>Computes the hyperbolic cosine of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":67,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L67"},"def":{"name":"cosh!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.cosh(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"exp(arr:Array(T)):Array(Float64)forallT-class-method","name":"exp","doc":"Computes the exponential of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 1.0, 2.0, 3.0])\nb = Narray::Math.exp(a)\nb.shape # => [2, 2]\nb.data  # => [1.0, 2.7183, 7.3891, 20.0855] (approximately)\n```","summary":"<p>Computes the exponential of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":12,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L12"},"def":{"name":"exp","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.exp(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"exp!(arr:Array(T)):Array(T)forallT-class-method","name":"exp!","doc":"Computes the exponential of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 1.0, 2.0, 3.0])\nNarray::Math.exp!(a)\na.data # => [1.0, 2.7183, 7.3891, 20.0855] (approximately)\n```","summary":"<p>Computes the exponential of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":31,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L31"},"def":{"name":"exp!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.exp(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"log(arr:Array(T)):Array(Float64)forallT-class-method","name":"log","doc":"Computes the natural logarithm of each element in the array.\n\n```\na = Narray.array([2, 2], [1.0, 2.0, 5.0, 10.0])\nb = Narray::Math.log(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.6931, 1.6094, 2.3026] (approximately)\n```","summary":"<p>Computes the natural logarithm of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":48,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L48"},"def":{"name":"log","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.log(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"log!(arr:Array(T)):Array(T)forallT-class-method","name":"log!","doc":"Computes the natural logarithm of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [1.0, 2.0, 5.0, 10.0])\nNarray::Math.log!(a)\na.data # => [0.0, 0.6931, 1.6094, 2.3026] (approximately)\n```","summary":"<p>Computes the natural logarithm of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":67,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L67"},"def":{"name":"log!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.log(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"log10(arr:Array(T)):Array(Float64)forallT-class-method","name":"log10","doc":"Computes the base-10 logarithm of each element in the array.\n\n```\na = Narray.array([2, 2], [1.0, 10.0, 100.0, 1000.0])\nb = Narray::Math.log10(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 1.0, 2.0, 3.0]\n```","summary":"<p>Computes the base-10 logarithm of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":84,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L84"},"def":{"name":"log10","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.log10(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"log10!(arr:Array(T)):Array(T)forallT-class-method","name":"log10!","doc":"Computes the base-10 logarithm of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [1.0, 10.0, 100.0, 1000.0])\nNarray::Math.log10!(a)\na.data # => [0.0, 1.0, 2.0, 3.0]\n```","summary":"<p>Computes the base-10 logarithm of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":103,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L103"},"def":{"name":"log10!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.log10(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"pow(arr:Array(T),power:Number):Array(Float64)forallT-class-method","name":"pow","doc":"Raises each element of the array to the specified power.\n\n```\na = Narray.array([2, 2], [1.0, 2.0, 3.0, 4.0])\nb = Narray::Math.pow(a, 2)\nb.shape # => [2, 2]\nb.data  # => [1.0, 4.0, 9.0, 16.0]\n```","summary":"<p>Raises each element of the array to the specified power.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"},{"name":"power","external_name":"power","restriction":"Number"}],"args_string":"(arr : Array(T), power : Number) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T), power : Number) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":156,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L156"},"def":{"name":"pow","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"},{"name":"power","external_name":"power","restriction":"Number"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = arr.data[i].to_f ** power\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"pow!(arr:Array(T),power:Number):Array(T)forallT-class-method","name":"pow!","doc":"Raises each element of the array to the specified power in-place.\n\n```\na = Narray.array([2, 2], [1.0, 2.0, 3.0, 4.0])\nNarray::Math.pow!(a, 2)\na.data # => [1.0, 4.0, 9.0, 16.0]\n```","summary":"<p>Raises each element of the array to the specified power in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"},{"name":"power","external_name":"power","restriction":"Number"}],"args_string":"(arr : Array(T), power : Number) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T), power : Number) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":175,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L175"},"def":{"name":"pow!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"},{"name":"power","external_name":"power","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(arr.data[i].to_f ** power)\nend\narr\n"}},{"html_id":"sin(arr:Array(T)):Array(Float64)forallT-class-method","name":"sin","doc":"Computes the sine of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/2, Math::PI, 3*Math::PI/2])\nb = Narray::Math.sin(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 1.0, 0.0, -1.0] (approximately)\n```","summary":"<p>Computes the sine of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":12,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L12"},"def":{"name":"sin","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.sin(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"sin!(arr:Array(T)):Array(T)forallT-class-method","name":"sin!","doc":"Computes the sine of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/2, Math::PI, 3*Math::PI/2])\nNarray::Math.sin!(a)\na.data # => [0.0, 1.0, 0.0, -1.0] (approximately)\n```","summary":"<p>Computes the sine of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":31,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L31"},"def":{"name":"sin!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.sin(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"sinh(arr:Array(T)):Array(Float64)forallT-class-method","name":"sinh","doc":"Computes the hyperbolic sine of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nb = Narray::Math.sinh(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.5211, 1.1752, 3.6269] (approximately)\n```","summary":"<p>Computes the hyperbolic sine of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":12,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L12"},"def":{"name":"sinh","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.sinh(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"sinh!(arr:Array(T)):Array(T)forallT-class-method","name":"sinh!","doc":"Computes the hyperbolic sine of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nNarray::Math.sinh!(a)\na.data # => [0.0, 0.5211, 1.1752, 3.6269] (approximately)\n```","summary":"<p>Computes the hyperbolic sine of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":31,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L31"},"def":{"name":"sinh!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.sinh(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"sqrt(arr:Array(T)):Array(Float64)forallT-class-method","name":"sqrt","doc":"Computes the square root of each element in the array.\n\n```\na = Narray.array([2, 2], [1.0, 4.0, 9.0, 16.0])\nb = Narray::Math.sqrt(a)\nb.shape # => [2, 2]\nb.data  # => [1.0, 2.0, 3.0, 4.0]\n```","summary":"<p>Computes the square root of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":120,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L120"},"def":{"name":"sqrt","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.sqrt(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"sqrt!(arr:Array(T)):Array(T)forallT-class-method","name":"sqrt!","doc":"Computes the square root of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [1.0, 4.0, 9.0, 16.0])\nNarray::Math.sqrt!(a)\na.data # => [1.0, 2.0, 3.0, 4.0]\n```","summary":"<p>Computes the square root of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/exponential.cr","line_number":139,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/exponential.cr#L139"},"def":{"name":"sqrt!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.sqrt(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"tan(arr:Array(T)):Array(Float64)forallT-class-method","name":"tan","doc":"Computes the tangent of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/4, Math::PI/2 - 0.01, Math::PI])\nb = Narray::Math.tan(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 1.0, very large value, 0.0] (approximately)\n```","summary":"<p>Computes the tangent of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":84,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L84"},"def":{"name":"tan","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.tan(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"tan!(arr:Array(T)):Array(T)forallT-class-method","name":"tan!","doc":"Computes the tangent of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, Math::PI/4, Math::PI/2 - 0.01, Math::PI])\nNarray::Math.tan!(a)\na.data # => [0.0, 1.0, very large value, 0.0] (approximately)\n```","summary":"<p>Computes the tangent of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/trig.cr","line_number":103,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/trig.cr#L103"},"def":{"name":"tan!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.tan(arr.data[i].to_f))\nend\narr\n"}},{"html_id":"tanh(arr:Array(T)):Array(Float64)forallT-class-method","name":"tanh","doc":"Computes the hyperbolic tangent of each element in the array.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nb = Narray::Math.tanh(a)\nb.shape # => [2, 2]\nb.data  # => [0.0, 0.4621, 0.7616, 0.9640] (approximately)\n```","summary":"<p>Computes the hyperbolic tangent of each element in the array.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(Float64) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":84,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L84"},"def":{"name":"tanh","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"new_data = ::Array(Float64).new(arr.size) do\n  0.0\nend\narr.size.times do |i|\n  new_data[i] = ::Math.tanh(arr.data[i].to_f)\nend\nArray(Float64).new(arr.shape.dup, new_data)\n"}},{"html_id":"tanh!(arr:Array(T)):Array(T)forallT-class-method","name":"tanh!","doc":"Computes the hyperbolic tangent of each element in the array in-place.\n\n```\na = Narray.array([2, 2], [0.0, 0.5, 1.0, 2.0])\nNarray::Math.tanh!(a)\na.data # => [0.0, 0.4621, 0.7616, 0.9640] (approximately)\n```","summary":"<p>Computes the hyperbolic tangent of each element in the array in-place.</p>","abstract":false,"args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"args_string":"(arr : Array(T)) : Array(T) forall T","args_html":"(arr : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math/hyperbolic.cr","line_number":103,"url":"https://github.com/kojix2/narray/blob/1e759d0c0f3b92f65aa676b3306d82f4fd54d994/src/narray/math/hyperbolic.cr#L103"},"def":{"name":"tanh!","args":[{"name":"arr","external_name":"arr","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"arr.size.times do |i|\n  arr.data[i] = T.new(::Math.tanh(arr.data[i].to_f))\nend\narr\n"}}]}]}]}}