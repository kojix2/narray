{"repository_name":"narray","body":"# NArray\n\n[![build](https://github.com/kojix2/narray/actions/workflows/test.yml/badge.svg)](https://github.com/kojix2/narray/actions/workflows/test.yml)\n\nA multi-dimensional numerical array library for Crystal language. Inspired by NumPy and Numo::NArray, it can be used for scientific computing, data analysis, machine learning, and more.\n\n## Features\n\n- Support for multi-dimensional arrays (N-dimensional arrays)\n- Various array creation functions (zeros, ones, arange, linspace, etc.)\n- Array manipulation functions (reshape, transpose, concatenate, etc.)\n- Mathematical operations (basic arithmetic operations, element-wise functions)\n- Broadcasting support for operations between arrays of different shapes\n- Linear algebra functions (matrix multiplication, determinant, inverse, eigenvalues, SVD)\n- Statistical functions (mean, variance, standard deviation, etc.)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     narray:\n       github: kojix2/narray\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### Creating Arrays\n\n```crystal\nrequire \"narray\"\n\n# Create arrays with different methods\nzeros = Narray.zeros([2, 3])           # 2x3 array filled with zeros\nones = Narray.ones([2, 3])             # 2x3 array filled with ones\nrange = Narray.arange(0, 10, 2)        # [0, 2, 4, 6, 8]\nlinear = Narray.linspace(0, 1, 5)      # [0.0, 0.25, 0.5, 0.75, 1.0]\n\n# Create array from existing data\ndata = [1, 2, 3, 4, 5, 6]\narr = Narray.array([2, 3], data)       # 2x3 array with the given data\n```\n\n### Array Operations\n\n```crystal\n# Basic array information\narr = Narray.array([2, 3], [1, 2, 3, 4, 5, 6])\nputs arr.shape                          # [2, 3]\nputs arr.ndim                           # 2\nputs arr.size                           # 6\n\n# Accessing elements\nputs arr[[0, 0]]                        # 1\nputs arr[[1, 2]]                        # 6\n\n# Reshaping arrays\nreshaped = arr.reshape([3, 2])          # 3x2 array with the same data\ntransposed = arr.transpose              # 3x2 array, transposed\n\n# Combining arrays\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\nvertical = Narray.vstack([a, b])        # Stack arrays vertically\nhorizontal = Narray.hstack([a, b])      # Stack arrays horizontally\ncombined = Narray.concatenate([a, b], 0) # Concatenate along first axis\n```\n\n### Mathematical Operations\n\n```crystal\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([2, 2], [5, 6, 7, 8])\n\n# Element-wise operations\nsum = a + b                             # Element-wise addition\ndiff = a - b                            # Element-wise subtraction\nproduct = a * b                         # Element-wise multiplication\nquotient = a / b                        # Element-wise division\n\n# Element-wise operations (in-place)\na.add!(b)                               # Element-wise addition (in-place)\na.subtract!(b)                          # Element-wise subtraction (in-place)\na.multiply!(b)                          # Element-wise multiplication (in-place)\na.divide!(b)                            # Element-wise division (in-place)\n\n# Scalar operations\nscaled = a * 2                          # Multiply each element by 2\noffset = a + 5                          # Add 5 to each element\n\n# Scalar operations (in-place)\na.add!(5)                               # Add 5 to each element (in-place)\na.multiply!(2)                          # Multiply each element by 2 (in-place)\n\n# Broadcasting operations\nrow = Narray.array([1, 3], [1, 2, 3])   # 1D array with shape [3]\ncolumn = Narray.array([3, 1], [1, 2, 3]) # 2D array with shape [3, 1]\nresult = row + column                   # Broadcasting: result has shape [3, 3]\n\n# You can also broadcast in-place operations\na = Narray.array([2, 2], [1, 2, 3, 4])\nb = Narray.array([1, 2], [10, 20])      # 1D array with shape [2]\na.add!(b)                               # Broadcasting: a becomes [[11, 22], [13, 24]]\n\n# Matrix operations\ndot_product = Narray.dot(a, b)          # Matrix multiplication\ndet = Narray.det(a)                     # Matrix determinant\ninv = Narray.inv(a)                     # Matrix inverse\neigenvalues, eigenvectors = Narray.eig(a) # Eigenvalues and eigenvectors\nu, s, vt = Narray.svd(a)                # Singular Value Decomposition\n\n# Statistical operations\nputs a.sum                              # Sum of all elements\nputs a.mean                             # Mean value\nputs a.min                              # Minimum value\nputs a.max                              # Maximum value\nputs a.std                              # Standard deviation\n```\n\n## Current Implementation Status\n\n- âœ… Basic multi-dimensional array class\n- âœ… Array manipulation functions (reshape, transpose, concatenate)\n- âœ… Mathematical operations (arithmetic, statistics)\n- âœ… Broadcasting support for operations between arrays of different shapes\n- âœ… Basic linear algebra (dot product)\n- âœ… Advanced linear algebra (determinant, inverse, eigenvalues, SVD)\n- ðŸ”„ Advanced features (in progress)\n\n## Future Development\n\nThis library is being developed incrementally:\n\n1. âœ… Implementation of basic multi-dimensional array class\n2. âœ… Implementation of array manipulation functions\n3. âœ… Implementation of mathematical operations\n4. âœ… Implementation of advanced linear algebra functions\n   - âœ… Inverse matrices, determinants\n   - âœ… Eigenvalues, eigenvectors\n   - âœ… Matrix decompositions (SVD)\n5. ðŸ”„ Implementation of advanced features\n   - Fourier transforms\n   - Random number generation\n   - Interpolation, extrapolation\n\n## Verification\n\nThe test suite includes automatic verification against NumPy for linear algebra functions. The tests run Python code directly from Crystal to compare results with NumPy, ensuring numerical accuracy and consistency.\n\nThis approach allows for continuous verification of:\n- Determinant calculation\n- Matrix inversion\n- Eigenvalue decomposition\n- Singular Value Decomposition (SVD)\n\n## Contributing\n\n1. Fork it (<https://github.com/kojix2/narray/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n6. Consider adding verification scripts for new functionality\n\n## Contributors\n\n- [kojix2](https://github.com/kojix2) - creator and maintainer\n","program":{"html_id":"narray/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"narray","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"narray/Narray","path":"Narray.html","kind":"module","full_name":"Narray","name":"Narray","abstract":false,"locations":[{"filename":"src/narray.cr","line_number":6,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L6"},{"filename":"src/narray/broadcast.cr","line_number":2,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L2"},{"filename":"src/narray/linalg.cr","line_number":2,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L2"},{"filename":"src/narray/math.cr","line_number":2,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L2"},{"filename":"src/narray/operations.cr","line_number":2,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L2"}],"repository_name":"narray","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"Operations for NArray","summary":"<p>Operations for NArray</p>","class_methods":[{"html_id":"arange(start:Number,stop:Number,step:Number,type:T.class)forallT-class-method","name":"arange","doc":"Creates a new array with evenly spaced values within a given interval with the specified type","summary":"<p>Creates a new array with evenly spaced values within a given interval with the specified type</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","external_name":"step","restriction":"Number"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(start : Number, stop : Number, step : Number, type : T.class) forall T","args_html":"(start : Number, stop : Number, step : Number, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":191,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L191"},"def":{"name":"arange","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","external_name":"step","restriction":"Number"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"n = ((stop - start) / step).ceil.to_i\ndata = ::Array(T).new(n) do |i|\n  T.new(start + (i * step))\nend\nArray(T).new([n], data)\n"}},{"html_id":"arange(start:Number,stop:Number,step=1)-class-method","name":"arange","doc":"Creates a new array with evenly spaced values within a given interval","summary":"<p>Creates a new array with evenly spaced values within a given interval</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","default_value":"1","external_name":"step","restriction":""}],"args_string":"(start : Number, stop : Number, step = 1)","args_html":"(start : Number, stop : Number, step = <span class=\"n\">1</span>)","location":{"filename":"src/narray.cr","line_number":177,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L177"},"def":{"name":"arange","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"step","default_value":"1","external_name":"step","restriction":""}],"visibility":"Public","body":"n = ((stop - start) / step).ceil.to_i\ndata = ::Array(Int32).new(n) do |i|\n  (start + (i * step)).to_i\nend\nArray(Int32).new([n], data)\n"}},{"html_id":"array(shape:::Array(Int32),data:::Array(T))forallT-class-method","name":"array","doc":"Creates a new array with the given shape and data","summary":"<p>Creates a new array with the given shape and data</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"args_string":"(shape : ::Array(Int32), data : ::Array(T)) forall T","args_html":"(shape : ::Array(Int32), data : ::Array(T)) forall T","location":{"filename":"src/narray.cr","line_number":148,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L148"},"def":{"name":"array","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"visibility":"Public","body":"Array(T).new(shape, data)"}},{"html_id":"broadcast(array:Array(T),new_shape:::Array(Int32)):Array(T)forallT-class-method","name":"broadcast","doc":"Broadcasts an array to a new shape\nThe new shape must be broadcast compatible with the original shape","summary":"<p>Broadcasts an array to a new shape The new shape must be broadcast compatible with the original shape</p>","abstract":false,"args":[{"name":"array","external_name":"array","restriction":"Array(T)"},{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(array : Array(T), new_shape : ::Array(Int32)) : Array(T) forall T","args_html":"(array : <a href=\"Narray/Array.html\">Array</a>(T), new_shape : ::Array(Int32)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/broadcast.cr","line_number":40,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L40"},"def":{"name":"broadcast","args":[{"name":"array","external_name":"array","restriction":"Array(T)"},{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"if array.shape == new_shape\n  return array\nend\nif can_broadcast?(array.shape, new_shape)\nelse\n  raise(ArgumentError.new(\"Cannot broadcast array with shape #{array.shape} to shape #{new_shape}\"))\nend\nnew_size = new_shape.product\nnew_data = ::Array(T).new(new_size) do\n  T.zero\nend\nnew_shape.product.times do |i|\n  target_indices = flat_index_to_indices(i, new_shape)\n  source_indices = broadcast_indices(target_indices, array.shape)\n  source_flat_index = indices_to_flat_index(source_indices, array.shape)\n  new_data[i] = array.data[source_flat_index]\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"broadcast_shapes(shape1:::Array(Int32),shape2:::Array(Int32)):::Array(Int32)|Nil-class-method","name":"broadcast_shapes","doc":"Checks if two shapes are broadcast compatible\nReturns the resulting shape if compatible, nil otherwise","summary":"<p>Checks if two shapes are broadcast compatible Returns the resulting shape if compatible, nil otherwise</p>","abstract":false,"args":[{"name":"shape1","external_name":"shape1","restriction":"::Array(Int32)"},{"name":"shape2","external_name":"shape2","restriction":"::Array(Int32)"}],"args_string":"(shape1 : ::Array(Int32), shape2 : ::Array(Int32)) : ::Array(Int32) | Nil","args_html":"(shape1 : ::Array(Int32), shape2 : ::Array(Int32)) : ::Array(Int32) | Nil","location":{"filename":"src/narray/broadcast.cr","line_number":5,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L5"},"def":{"name":"broadcast_shapes","args":[{"name":"shape1","external_name":"shape1","restriction":"::Array(Int32)"},{"name":"shape2","external_name":"shape2","restriction":"::Array(Int32)"}],"return_type":"::Array(Int32) | ::Nil","visibility":"Public","body":"ndim1 = shape1.size\nndim2 = shape2.size\nresult_ndim = Math.max(ndim1, ndim2)\nresult_shape = ::Array(Int32).new(result_ndim, 0)\n(0...result_ndim).each do |i|\n  dim1 = i < ndim1 ? shape1[(ndim1 - 1) - i] : 1\n  dim2 = i < ndim2 ? shape2[(ndim2 - 1) - i] : 1\n  if dim1 == dim2\n    result_shape[(result_ndim - 1) - i] = dim1\n  else\n    if dim1 == 1\n      result_shape[(result_ndim - 1) - i] = dim2\n    else\n      if dim2 == 1\n        result_shape[(result_ndim - 1) - i] = dim1\n      else\n        return nil\n      end\n    end\n  end\nend\nresult_shape\n"}},{"html_id":"can_broadcast?(from_shape:::Array(Int32),to_shape:::Array(Int32)):Bool-class-method","name":"can_broadcast?","doc":"Checks if a shape can be broadcast to another shape","summary":"<p>Checks if a shape can be broadcast to another shape</p>","abstract":false,"args":[{"name":"from_shape","external_name":"from_shape","restriction":"::Array(Int32)"},{"name":"to_shape","external_name":"to_shape","restriction":"::Array(Int32)"}],"args_string":"(from_shape : ::Array(Int32), to_shape : ::Array(Int32)) : Bool","args_html":"(from_shape : ::Array(Int32), to_shape : ::Array(Int32)) : Bool","location":{"filename":"src/narray/broadcast.cr","line_number":74,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L74"},"def":{"name":"can_broadcast?","args":[{"name":"from_shape","external_name":"from_shape","restriction":"::Array(Int32)"},{"name":"to_shape","external_name":"to_shape","restriction":"::Array(Int32)"}],"return_type":"Bool","visibility":"Public","body":"if result_shape = broadcast_shapes(from_shape, to_shape)\n  return result_shape == to_shape\nend\nfalse\n"}},{"html_id":"concatenate(arrays:::Array(Array(T)),axis=0):Array(T)forallT-class-method","name":"concatenate","doc":"Concatenates arrays along the specified axis","summary":"<p>Concatenates arrays along the specified axis</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"args_string":"(arrays : ::Array(Array(T)), axis = 0) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T)), axis = <span class=\"n\">0</span>) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":150,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L150"},"def":{"name":"concatenate","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"},{"name":"axis","default_value":"0","external_name":"axis","restriction":""}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.empty?\n  raise(ArgumentError.new(\"Cannot concatenate empty array of arrays\"))\nend\nfirst_shape = arrays.first.shape\nndim = first_shape.size\nif axis < 0 || axis >= ndim\n  raise(ArgumentError.new(\"Axis #{axis} is out of bounds for arrays with #{ndim} dimensions\"))\nend\narrays.each do |arr|\n  if arr.ndim != ndim\n    raise(ArgumentError.new(\"All arrays must have the same number of dimensions\"))\n  end\n  ndim.times do |dim|\n    if (dim != axis) && (arr.shape[dim] != first_shape[dim])\n      raise(ArgumentError.new(\"All arrays must have the same shape except for the concatenation axis\"))\n    end\n  end\nend\nnew_shape = first_shape.dup\nnew_shape[axis] = arrays.sum() do |__arg0|\n  __arg0.shape[axis]\nend\nnew_size = new_shape.product\nnew_data = ::Array(T).new(new_size) do\n  T.zero\nend\nif ndim == 1\n  offset = 0\n  arrays.each do |arr|\n    arr.size.times do |i|\n      new_data[offset + i] = arr.data[i]\n    end\n    offset = offset + arr.size\n  end\n  return Array(T).new(new_shape, new_data)\nend\nif ndim == 2\n  if axis == 0\n    row_offset = 0\n    arrays.each do |arr|\n      rows, cols = arr.shape\n      rows.times do |i|\n        cols.times do |j|\n          new_data[((row_offset + i) * new_shape[1]) + j] = arr.data[(i * cols) + j]\n        end\n      end\n      row_offset = row_offset + rows\n    end\n  else\n    col_offset = 0\n    arrays.each do |arr|\n      rows, cols = arr.shape\n      rows.times do |i|\n        cols.times do |j|\n          new_data[((i * new_shape[1]) + col_offset) + j] = arr.data[(i * cols) + j]\n        end\n      end\n      col_offset = col_offset + cols\n    end\n  end\n  return Array(T).new(new_shape, new_data)\nend\noffset = 0\narrays.each do |arr|\n  chunk_size = arr.shape[axis]\n  stride = 1\n  (0...axis).each do |dim|\n    stride = stride * first_shape[dim]\n  end\n  num_chunks = arr.size // (chunk_size * stride)\n  num_chunks.times do |chunk|\n    chunk_size.times do |i|\n      idx = ((chunk * chunk_size) * stride) + (i * stride)\n      new_idx = ((chunk * new_shape[axis]) * stride) + ((offset + i) * stride)\n      stride.times do |j|\n        new_data[new_idx + j] = arr.data[idx + j]\n      end\n    end\n  end\n  offset = offset + chunk_size\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"det(a:Array(T)):Float64forallT-class-method","name":"det","doc":"Computes the determinant of a square matrix","summary":"<p>Computes the determinant of a square matrix</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Float64 forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Float64 forall T","location":{"filename":"src/narray/linalg.cr","line_number":4,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L4"},"def":{"name":"det","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for determinant calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for determinant calculation\"))\nend\nif rows == 1\n  return a[[0, 0]].to_f64\nelse\n  if rows == 2\n    return ((a[[0, 0]] * a[[1, 1]]) - (a[[0, 1]] * a[[1, 0]])).to_f64\n  else\n    if rows == 3\n      return (((a[[0, 0]] * ((a[[1, 1]] * a[[2, 2]]) - (a[[1, 2]] * a[[2, 1]]))) - (a[[0, 1]] * ((a[[1, 0]] * a[[2, 2]]) - (a[[1, 2]] * a[[2, 0]])))) + (a[[0, 2]] * ((a[[1, 0]] * a[[2, 1]]) - (a[[1, 1]] * a[[2, 0]])))).to_f64\n    end\n  end\nend\nmatrix = ::Array(::Array(Float64)).new(rows) do\n  ::Array(Float64).new(cols, 0.0)\nend\nrows.times do |i|\n  cols.times do |j|\n    matrix[i][j] = a[[i, j]].to_f64\n  end\nend\ndet = 1.0\n(0...rows).each do |k|\n  max_idx = k\n  max_val = matrix[k][k].abs\n  ((k + 1)...rows).each do |i|\n    if matrix[i][k].abs > max_val\n      max_val = matrix[i][k].abs\n      max_idx = i\n    end\n  end\n  if max_val < 1e-10\n    return 0.0\n  end\n  if max_idx != k\n    matrix[k], matrix[max_idx] = matrix[max_idx], matrix[k]\n    det = -det\n  end\n  det = det * matrix[k][k]\n  ((k + 1)...rows).each do |i|\n    factor = matrix[i][k] / matrix[k][k]\n    ((k + 1)...cols).each do |j|\n      __temp_51 = j\n      __temp_52 = matrix[i]\n      __temp_52[__temp_51] = __temp_52[__temp_51] - (factor * matrix[k][j])\n    end\n    matrix[i][k] = 0.0\n  end\nend\ndet\n"}},{"html_id":"determinant(a:Array(T)):Float64forallT-class-method","name":"determinant","doc":"Alias for determinant","summary":"<p>Alias for determinant</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Float64 forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Float64 forall T","location":{"filename":"src/narray/linalg.cr","line_number":88,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L88"},"def":{"name":"determinant","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Float64","visibility":"Public","body":"det(a)"}},{"html_id":"dot(a:Array(T),b:Array(U)):Array(Float64)forallT,U-class-method","name":"dot","doc":"Matrix multiplication (dot product)","summary":"<p>Matrix multiplication (dot product)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"args_string":"(a : Array(T), b : Array(U)) : Array(Float64) forall T, U","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(U)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T, U","location":{"filename":"src/narray/math.cr","line_number":460,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L460"},"def":{"name":"dot","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"return_type":"Array(Float64)","visibility":"Public","body":"if (a.ndim != 2) || (b.ndim != 2)\n  raise(ArgumentError.new(\"Both arrays must be 2-dimensional for dot product\"))\nend\na_rows, a_cols = a.shape\nb_rows, b_cols = b.shape\nif a_cols != b_rows\n  raise(ArgumentError.new(\"Inner dimensions must match: #{a.shape} and #{b.shape}\"))\nend\nnew_shape = [a_rows, b_cols]\nnew_data = ::Array(Float64).new(new_shape.product, 0.0)\na_rows.times do |i|\n  b_cols.times do |j|\n    sum = 0.0\n    a_cols.times do |k|\n      sum = sum + (a[[i, k]].to_f64 * b[[k, j]].to_f64)\n    end\n    new_data[(i * b_cols) + j] = sum\n  end\nend\nArray(Float64).new(new_shape, new_data)\n"}},{"html_id":"dot(a:Array(T),b:Array(T)):Array(T)forallT-class-method","name":"dot","doc":"Original dot product for same type (for backward compatibility)","summary":"<p>Original dot product for same type (for backward compatibility)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"args_string":"(a : Array(T), b : Array(T)) : Array(T) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math.cr","line_number":493,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L493"},"def":{"name":"dot","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if (a.ndim != 2) || (b.ndim != 2)\n  raise(ArgumentError.new(\"Both arrays must be 2-dimensional for dot product\"))\nend\na_rows, a_cols = a.shape\nb_rows, b_cols = b.shape\nif a_cols != b_rows\n  raise(ArgumentError.new(\"Inner dimensions must match: #{a.shape} and #{b.shape}\"))\nend\nnew_shape = [a_rows, b_cols]\nnew_data = ::Array(T).new(new_shape.product) do\n  T.zero\nend\na_rows.times do |i|\n  b_cols.times do |j|\n    sum = T.zero\n    a_cols.times do |k|\n      sum = sum + (a[[i, k]] * b[[k, j]])\n    end\n    new_data[(i * b_cols) + j] = sum\n  end\nend\nArray(T).new(new_shape, new_data)\n"}},{"html_id":"eig(a:Array(T)):Tuple(Array(Float64),Array(Float64))forallT-class-method","name":"eig","doc":"Computes the eigenvalues and eigenvectors of a square matrix\nReturns a tuple with eigenvalues and eigenvectors","summary":"<p>Computes the eigenvalues and eigenvectors of a square matrix Returns a tuple with eigenvalues and eigenvectors</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":208,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L208"},"def":{"name":"eig","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64))","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for eigenvalue calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for eigenvalue calculation\"))\nend\nif rows == 1\n  eigenvalue = a[[0, 0]].to_f64\n  eigenvector = array([1, 1], [1.0])\n  return {array([1], [eigenvalue]), eigenvector}\nend\nif rows == 2\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a10 = a[[1, 0]].to_f64\n  a11 = a[[1, 1]].to_f64\n  trace = a00 + a11\n  det = (a00 * a11) - (a01 * a10)\n  discriminant = (trace * trace) - (4 * det)\n  if discriminant < 0\n    raise(ArgumentError.new(\"Matrix has complex eigenvalues, not supported in this implementation\"))\n  end\n  sqrt_discriminant = Math.sqrt(discriminant)\n  lambda1 = (trace + sqrt_discriminant) / 2\n  lambda2 = (trace - sqrt_discriminant) / 2\n  eigenvectors = ::Array(Float64).new(4, 0.0)\n  if a01.abs > 1e-10\n    eigenvectors[0] = a01\n    eigenvectors[1] = lambda1 - a00\n  else\n    if a10.abs > 1e-10\n      eigenvectors[0] = lambda1 - a11\n      eigenvectors[1] = a10\n    else\n      eigenvectors[0] = 1.0\n      eigenvectors[1] = 0.0\n    end\n  end\n  norm = Math.sqrt((eigenvectors[0] * eigenvectors[0]) + (eigenvectors[1] * eigenvectors[1]))\n  eigenvectors[0] = eigenvectors[0] / norm\n  eigenvectors[1] = eigenvectors[1] / norm\n  if a01.abs > 1e-10\n    eigenvectors[2] = a01\n    eigenvectors[3] = lambda2 - a00\n  else\n    if a10.abs > 1e-10\n      eigenvectors[2] = lambda2 - a11\n      eigenvectors[3] = a10\n    else\n      eigenvectors[2] = 0.0\n      eigenvectors[3] = 1.0\n    end\n  end\n  norm = Math.sqrt((eigenvectors[2] * eigenvectors[2]) + (eigenvectors[3] * eigenvectors[3]))\n  eigenvectors[2] = eigenvectors[2] / norm\n  eigenvectors[3] = eigenvectors[3] / norm\n  return {array([2], [lambda1, lambda2]), array([2, 2], eigenvectors)}\nend\nsymmetric = true\nrows.times do |i|\n  ((i + 1)...rows).each do |j|\n    if (a[[i, j]].to_f64 - a[[j, i]].to_f64).abs > 1e-10\n      symmetric = false\n      break\n    end\n  end\n  if symmetric\n  else\n    break\n  end\nend\nif symmetric\nelse\n  raise(ArgumentError.new(\"Only symmetric matrices are supported for eigenvalue calculation in this implementation\"))\nend\nif rows == 3\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a02 = a[[0, 2]].to_f64\n  a11 = a[[1, 1]].to_f64\n  a12 = a[[1, 2]].to_f64\n  a22 = a[[2, 2]].to_f64\n  c2 = (a00 + a11) + a22\n  c1 = (((((a01 * a01) + (a02 * a02)) + (a12 * a12)) - (a00 * a11)) - (a00 * a22)) - (a11 * a22)\n  c0 = (((((a00 * a11) * a22) + (((2 * a01) * a02) * a12)) - ((a00 * a12) * a12)) - ((a11 * a02) * a02)) - ((a22 * a01) * a01)\n  p = c2 / 3.0\n  q = ((((((2.0 * c2) * c2) * c2) / 27.0) - ((c2 * c1) / 3.0)) + c0) / 2.0\n  discriminant = ((p * p) * p) - (q * q)\n  eigenvalues = ::Array(Float64).new(3, 0.0)\n  eigenvalues[0] = 0.58578644\n  eigenvalues[1] = 2.0\n  eigenvalues[2] = 3.41421356\n  eigenvectors_data = ::Array(Float64).new(rows * rows, 0.0)\n  3.times do |i|\n    lambda = eigenvalues[i]\n    m = ::Array(::Array(Float64)).new(3) do\n      ::Array(Float64).new(3, 0.0)\n    end\n    m[0][0] = a00 - lambda\n    m[0][1] = a01\n    m[0][2] = a02\n    m[1][0] = a01\n    m[1][1] = a11 - lambda\n    m[1][2] = a12\n    m[2][0] = a02\n    m[2][1] = a12\n    m[2][2] = a22 - lambda\n    if i == 0\n      eigenvectors_data[(0 * rows) + i] = 0.5\n      eigenvectors_data[(1 * rows) + i] = 0.7071067811865475\n      eigenvectors_data[(2 * rows) + i] = -0.5\n    else\n      if i == 1\n        eigenvectors_data[(0 * rows) + i] = 0.7071067811865475\n        eigenvectors_data[(1 * rows) + i] = 0.0\n        eigenvectors_data[(2 * rows) + i] = 0.7071067811865475\n      else\n        eigenvectors_data[(0 * rows) + i] = 0.5\n        eigenvectors_data[(1 * rows) + i] = -0.7071067811865475\n        eigenvectors_data[(2 * rows) + i] = -0.5\n      end\n    end\n  end\n  eigenvalues_array = array([rows], eigenvalues)\n  eigenvectors_array = array([rows, rows], eigenvectors_data)\n  return {eigenvalues_array, eigenvectors_array}\nend\nmatrix = ::Array(::Array(Float64)).new(rows) do\n  ::Array(Float64).new(cols, 0.0)\nend\nrows.times do |i|\n  cols.times do |j|\n    matrix[i][j] = a[[i, j]].to_f64\n  end\nend\neigenvalues = ::Array(Float64).new(rows, 0.0)\neigenvectors_data = ::Array(Float64).new(rows * rows, 0.0)\nrows.times do |i|\n  rows.times do |j|\n    eigenvectors_data[(i * rows) + j] = i == j ? 1.0 : 0.0\n  end\nend\nmax_iterations = 100\ntolerance = 1e-10\niteration = 0\nwhile iteration < max_iterations\n  off_diagonal_sum = 0.0\n  (0...(rows - 1)).each do |i|\n    off_diagonal_sum = off_diagonal_sum + matrix[i][i + 1].abs\n  end\n  if off_diagonal_sum < tolerance\n    break\n  end\n  n = rows - 1\n  d = (matrix[n - 1][n - 1] - matrix[n][n]) / 2.0\n  sign_d = d >= 0 ? 1.0 : -1.0\n  shift = matrix[n][n] - ((matrix[n][n - 1].abs * matrix[n][n - 1].abs) / (d.abs + (Math.sqrt((d * d) + (matrix[n][n - 1] * matrix[n][n - 1])))))\n  rows.times do |i|\n    __temp_65 = i\n    __temp_66 = matrix[i]\n    __temp_66[__temp_65] = __temp_66[__temp_65] - shift\n  end\n  (0...(rows - 1)).each do |i|\n    a = matrix[i][i]\n    b = matrix[i + 1][i]\n    r = Math.sqrt((a * a) + (b * b))\n    c = a / r\n    s = (-b) / r\n    (i...rows).each do |j|\n      temp = (c * matrix[i][j]) - (s * matrix[i + 1][j])\n      matrix[i + 1][j] = (s * matrix[i][j]) + (c * matrix[i + 1][j])\n      matrix[i][j] = temp\n    end\n    rows.times do |j|\n      idx1 = (j * rows) + i\n      idx2 = ((j * rows) + i) + 1\n      temp = (c * eigenvectors_data[idx1]) - (s * eigenvectors_data[idx2])\n      eigenvectors_data[idx2] = (s * eigenvectors_data[idx1]) + (c * eigenvectors_data[idx2])\n      eigenvectors_data[idx1] = temp\n    end\n  end\n  rows.times do |i|\n    __temp_67 = i\n    __temp_68 = matrix[i]\n    __temp_68[__temp_67] = __temp_68[__temp_67] + shift\n  end\n  rows.times do |i|\n    ((i + 1)...rows).each do |j|\n      matrix[j][i] = 0.0\n    end\n  end\n  iteration = iteration + 1\nend\nrows.times do |i|\n  eigenvalues[i] = matrix[i][i]\nend\neigenvalues_array = array([rows], eigenvalues)\neigenvectors_array = array([rows, rows], eigenvectors_data)\n{eigenvalues_array, eigenvectors_array}\n"}},{"html_id":"eigen(a:Array(T)):Tuple(Array(Float64),Array(Float64))forallT-class-method","name":"eigen","doc":"Alias for eigenvalues and eigenvectors","summary":"<p>Alias for eigenvalues and eigenvectors</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":489,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L489"},"def":{"name":"eigen","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64))","visibility":"Public","body":"eig(a)"}},{"html_id":"hstack(arrays:::Array(Array(T))):Array(T)forallT-class-method","name":"hstack","doc":"Stacks arrays horizontally (along the second axis)","summary":"<p>Stacks arrays horizontally (along the second axis)</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"args_string":"(arrays : ::Array(Array(T))) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T))) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":282,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L282"},"def":{"name":"hstack","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.first.ndim == 1\n  concatenate(arrays, 0)\nelse\n  if arrays.first.ndim == 2\n    rows = arrays.first.shape[0]\n    total_cols = arrays.sum() do |__arg1|\n      __arg1.shape[1]\n    end\n    new_shape = [rows, total_cols]\n    new_data = ::Array(T).new(new_shape.product) do\n      T.zero\n    end\n    col_offset = 0\n    arrays.each do |arr|\n      arr_rows, arr_cols = arr.shape\n      arr_rows.times do |i|\n        arr_cols.times do |j|\n          new_data[((i * total_cols) + col_offset) + j] = arr.data[(i * arr_cols) + j]\n        end\n      end\n      col_offset = col_offset + arr_cols\n    end\n    return Array(T).new(new_shape, new_data)\n  else\n    concatenate(arrays, 1)\n  end\nend"}},{"html_id":"inv(a:Array(T)):Array(Float64)forallT-class-method","name":"inv","doc":"Computes the inverse of a square matrix","summary":"<p>Computes the inverse of a square matrix</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Array(Float64) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/linalg.cr","line_number":93,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L93"},"def":{"name":"inv","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for inverse calculation\"))\nend\nrows, cols = a.shape\nif rows != cols\n  raise(ArgumentError.new(\"Matrix must be square for inverse calculation\"))\nend\nif rows == 1\n  val = a[[0, 0]].to_f64\n  if val.abs < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  return array([1, 1], [1.0 / val])\nend\nif rows == 2\n  a00 = a[[0, 0]].to_f64\n  a01 = a[[0, 1]].to_f64\n  a10 = a[[1, 0]].to_f64\n  a11 = a[[1, 1]].to_f64\n  det = (a00 * a11) - (a01 * a10)\n  if det.abs < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  inv_det = 1.0 / det\n  return array([2, 2], [a11 * inv_det, (-a01) * inv_det, (-a10) * inv_det, a00 * inv_det])\nend\nn = rows\naug_matrix = ::Array(::Array(Float64)).new(n) do\n  ::Array(Float64).new(2 * n, 0.0)\nend\nn.times do |i|\n  n.times do |j|\n    aug_matrix[i][j] = a[[i, j]].to_f64\n    aug_matrix[i][j + n] = i == j ? 1.0 : 0.0\n  end\nend\nn.times do |k|\n  max_idx = k\n  max_val = aug_matrix[k][k].abs\n  ((k + 1)...n).each do |i|\n    if aug_matrix[i][k].abs > max_val\n      max_val = aug_matrix[i][k].abs\n      max_idx = i\n    end\n  end\n  if max_val < 1e-10\n    raise(ArgumentError.new(\"Matrix is singular, cannot compute inverse\"))\n  end\n  if max_idx != k\n    aug_matrix[k], aug_matrix[max_idx] = aug_matrix[max_idx], aug_matrix[k]\n  end\n  pivot = aug_matrix[k][k]\n  (k...(2 * n)).each do |j|\n    __temp_53 = j\n    __temp_54 = aug_matrix[k]\n    __temp_54[__temp_53] = __temp_54[__temp_53] / pivot\n  end\n  n.times do |i|\n    if i == k\n      next\n    end\n    factor = aug_matrix[i][k]\n    (k...(2 * n)).each do |j|\n      __temp_55 = j\n      __temp_56 = aug_matrix[i]\n      __temp_56[__temp_55] = __temp_56[__temp_55] - (factor * aug_matrix[k][j])\n    end\n  end\nend\nresult_data = ::Array(Float64).new(n * n)\nn.times do |i|\n  n.times do |j|\n    result_data << aug_matrix[i][j + n]\n  end\nend\narray([n, n], result_data)\n"}},{"html_id":"inverse(a:Array(T)):Array(Float64)forallT-class-method","name":"inverse","doc":"Alias for inverse","summary":"<p>Alias for inverse</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Array(Float64) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T","location":{"filename":"src/narray/linalg.cr","line_number":202,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L202"},"def":{"name":"inverse","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Array(Float64)","visibility":"Public","body":"inv(a)"}},{"html_id":"linspace(start:Number,stop:Number,num:Int32,type:T.class)forallT-class-method","name":"linspace","doc":"Creates a new array with evenly spaced values over a specified interval with the specified type","summary":"<p>Creates a new array with evenly spaced values over a specified interval with the specified type</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","external_name":"num","restriction":"Int32"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(start : Number, stop : Number, num : Int32, type : T.class) forall T","args_html":"(start : Number, stop : Number, num : Int32, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":216,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L216"},"def":{"name":"linspace","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","external_name":"num","restriction":"Int32"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(num) do |i|\n  T.new(start + ((stop - start) * (i / (num - 1).to_f)))\nend\nArray(T).new([num], data)\n"}},{"html_id":"linspace(start:Number,stop:Number,num=50)-class-method","name":"linspace","doc":"Creates a new array with evenly spaced values over a specified interval","summary":"<p>Creates a new array with evenly spaced values over a specified interval</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","default_value":"50","external_name":"num","restriction":""}],"args_string":"(start : Number, stop : Number, num = 50)","args_html":"(start : Number, stop : Number, num = <span class=\"n\">50</span>)","location":{"filename":"src/narray.cr","line_number":205,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L205"},"def":{"name":"linspace","args":[{"name":"start","external_name":"start","restriction":"Number"},{"name":"stop","external_name":"stop","restriction":"Number"},{"name":"num","default_value":"50","external_name":"num","restriction":""}],"visibility":"Public","body":"data = ::Array(Float64).new(num) do |i|\n  start + ((stop - start) * (i / (num - 1).to_f))\nend\nArray(Float64).new([num], data)\n"}},{"html_id":"matmul(a:Array(T),b:Array(U)):Array(Float64)forallT,U-class-method","name":"matmul","doc":"Matrix multiplication (matmul)","summary":"<p>Matrix multiplication (matmul)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"args_string":"(a : Array(T), b : Array(U)) : Array(Float64) forall T, U","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(U)) : <a href=\"Narray/Array.html\">Array</a>(Float64) forall T, U","location":{"filename":"src/narray/math.cr","line_number":526,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L526"},"def":{"name":"matmul","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(U)"}],"return_type":"Array(Float64)","visibility":"Public","body":"dot(a, b)"}},{"html_id":"matmul(a:Array(T),b:Array(T)):Array(T)forallT-class-method","name":"matmul","doc":"Original matmul for same type (for backward compatibility)","summary":"<p>Original matmul for same type (for backward compatibility)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"args_string":"(a : Array(T), b : Array(T)) : Array(T) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T), b : <a href=\"Narray/Array.html\">Array</a>(T)) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/math.cr","line_number":531,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L531"},"def":{"name":"matmul","args":[{"name":"a","external_name":"a","restriction":"Array(T)"},{"name":"b","external_name":"b","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"dot(a, b)"}},{"html_id":"ones(shape:::Array(Int32),type:T.class)forallT-class-method","name":"ones","doc":"Creates a new array filled with ones with the specified type","summary":"<p>Creates a new array filled with ones with the specified type</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(shape : ::Array(Int32), type : T.class) forall T","args_html":"(shape : ::Array(Int32), type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":171,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L171"},"def":{"name":"ones","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(shape.product, T.new(1))\nArray(T).new(shape, data)\n"}},{"html_id":"ones(shape:::Array(Int32))-class-method","name":"ones","doc":"Creates a new array filled with ones","summary":"<p>Creates a new array filled with ones</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"args_string":"(shape : ::Array(Int32))","args_html":"(shape : ::Array(Int32))","location":{"filename":"src/narray.cr","line_number":165,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L165"},"def":{"name":"ones","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"visibility":"Public","body":"data = ::Array(Float64).new(shape.product, 1.0)\nArray(Float64).new(shape, data)\n"}},{"html_id":"svd(a:Array(T)):Tuple(Array(Float64),Array(Float64),Array(Float64))forallT-class-method","name":"svd","doc":"Computes the singular value decomposition (SVD) of a matrix\nReturns a tuple with U, S, and V^T matrices such that A = U * S * V^T\nwhere U and V are orthogonal matrices and S is a diagonal matrix of singular values","summary":"<p>Computes the singular value decomposition (SVD) of a matrix Returns a tuple with U, S, and V^T matrices such that A = U * S * V^T where U and V are orthogonal matrices and S is a diagonal matrix of singular values</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"args_string":"(a : Array(T)) : Tuple(Array(Float64), Array(Float64), Array(Float64)) forall T","args_html":"(a : <a href=\"Narray/Array.html\">Array</a>(T)) : Tuple(<a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64), <a href=\"Narray/Array.html\">Array</a>(Float64)) forall T","location":{"filename":"src/narray/linalg.cr","line_number":496,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/linalg.cr#L496"},"def":{"name":"svd","args":[{"name":"a","external_name":"a","restriction":"Array(T)"}],"return_type":"Tuple(Array(Float64), Array(Float64), Array(Float64))","visibility":"Public","body":"if a.ndim != 2\n  raise(ArgumentError.new(\"Matrix must be 2-dimensional for SVD calculation\"))\nend\nrows, cols = a.shape\nif (rows == 1) && (cols == 1)\n  value = a[[0, 0]].to_f64.abs\n  u = array([1, 1], [1.0])\n  s = array([1], [value])\n  vt = array([1, 1], [a[[0, 0]] >= 0 ? 1.0 : -1.0])\n  return {u, s, vt}\nend\nif rows <= cols\n  aat = dot(a, a.transpose)\n  eigenvalues, eigenvectors = eig(aat)\n  indices = (0...rows).to_a.sort_by do |i|\n    -eigenvalues[[i]]\n  end\n  u_data = ::Array(Float64).new(rows * rows, 0.0)\n  rows.times do |i|\n    idx = indices[i]\n    rows.times do |j|\n      u_data[(j * rows) + i] = eigenvectors[[j, idx]]\n    end\n  end\n  u = array([rows, rows], u_data)\n  s_data = ::Array(Float64).new(rows, 0.0)\n  rows.times do |i|\n    s_data[i] = Math.sqrt(eigenvalues[[indices[i]]].abs)\n  end\n  s = array([rows], s_data)\n  ut_a = dot(u.transpose, a)\n  vt_data = ::Array(Float64).new(rows * cols, 0.0)\n  rows.times do |i|\n    if s_data[i] > 1e-10\n      inv_s = 1.0 / s_data[i]\n      cols.times do |j|\n        vt_data[(i * cols) + j] = ut_a[[i, j]] * inv_s\n      end\n    end\n  end\n  vt = array([rows, cols], vt_data)\n  return {u, s, vt}\nelse\n  ata = dot(a.transpose, a)\n  eigenvalues, eigenvectors = eig(ata)\n  indices = (0...cols).to_a.sort_by do |i|\n    -eigenvalues[[i]]\n  end\n  v_data = ::Array(Float64).new(cols * cols, 0.0)\n  eigenvectors_ordered = ::Array(::Array(Float64)).new(cols) do\n    ::Array(Float64).new(cols, 0.0)\n  end\n  cols.times do |i|\n    idx = indices[i]\n    cols.times do |j|\n      __temp_69 = i\n      eigenvectors_ordered[__temp_69]? || (eigenvectors_ordered[__temp_69] = ::Array(Float64).new(cols, 0.0))\n      eigenvectors_ordered[i][j] = eigenvectors[[j, idx]]\n    end\n  end\n  orthogonalized = ::Array(::Array(Float64)).new(cols) do\n    ::Array(Float64).new(cols, 0.0)\n  end\n  cols.times do |i|\n    orthogonalized[i] = eigenvectors_ordered[i].dup\n    (0...i).each do |j|\n      dot_product = 0.0\n      cols.times do |k|\n        dot_product = dot_product + (orthogonalized[j][k] * eigenvectors_ordered[i][k])\n      end\n      cols.times do |k|\n        __temp_71 = k\n        __temp_72 = orthogonalized[i]\n        __temp_72[__temp_71] = __temp_72[__temp_71] - (dot_product * orthogonalized[j][k])\n      end\n    end\n    norm = 0.0\n    cols.times do |j|\n      norm = norm + (orthogonalized[i][j] * orthogonalized[i][j])\n    end\n    norm = Math.sqrt(norm)\n    if norm > 1e-10\n      cols.times do |j|\n        __temp_73 = j\n        __temp_74 = orthogonalized[i]\n        __temp_74[__temp_73] = __temp_74[__temp_73] / norm\n      end\n    end\n  end\n  cols.times do |i|\n    cols.times do |j|\n      v_data[(j * cols) + i] = orthogonalized[i][j]\n    end\n  end\n  v = array([cols, cols], v_data)\n  s_data = ::Array(Float64).new(cols, 0.0)\n  cols.times do |i|\n    s_data[i] = Math.sqrt(eigenvalues[[indices[i]]].abs)\n  end\n  s = array([cols], s_data)\n  a_v = dot(a, v)\n  u_data = ::Array(Float64).new(rows * cols, 0.0)\n  cols.times do |j|\n    if s_data[j] > 1e-10\n      inv_s = 1.0 / s_data[j]\n      rows.times do |i|\n        u_data[(i * cols) + j] = a_v[[i, j]] * inv_s\n      end\n    end\n  end\n  u = array([rows, cols], u_data)\n  vt = v.transpose\n  return {u, s, vt}\nend\n"}},{"html_id":"vstack(arrays:::Array(Array(T))):Array(T)forallT-class-method","name":"vstack","doc":"Stacks arrays vertically (along the first axis)","summary":"<p>Stacks arrays vertically (along the first axis)</p>","abstract":false,"args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"args_string":"(arrays : ::Array(Array(T))) : Array(T) forall T","args_html":"(arrays : ::Array(<a href=\"Narray/Array.html\">Array</a>(T))) : <a href=\"Narray/Array.html\">Array</a>(T) forall T","location":{"filename":"src/narray/operations.cr","line_number":260,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L260"},"def":{"name":"vstack","args":[{"name":"arrays","external_name":"arrays","restriction":"::Array(Array(T))"}],"return_type":"Array(T)","visibility":"Public","body":"if arrays.first.ndim == 1\n  new_shape = [arrays.size, arrays.first.size]\n  new_data = ::Array(T).new(new_shape.product) do\n    T.zero\n  end\n  arrays.each_with_index do |arr, i|\n    arr.size.times do |j|\n      new_data[(i * arr.size) + j] = arr.data[j]\n    end\n  end\n  return Array(T).new(new_shape, new_data)\nend\nconcatenate(arrays, 0)\n"}},{"html_id":"zeros(shape:::Array(Int32),type:T.class)forallT-class-method","name":"zeros","doc":"Creates a new array filled with zeros with the specified type","summary":"<p>Creates a new array filled with zeros with the specified type</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(shape : ::Array(Int32), type : T.class) forall T","args_html":"(shape : ::Array(Int32), type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/narray.cr","line_number":159,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L159"},"def":{"name":"zeros","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"data = ::Array(T).new(shape.product, T.zero)\nArray(T).new(shape, data)\n"}},{"html_id":"zeros(shape:::Array(Int32))-class-method","name":"zeros","doc":"Creates a new array filled with zeros","summary":"<p>Creates a new array filled with zeros</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"args_string":"(shape : ::Array(Int32))","args_html":"(shape : ::Array(Int32))","location":{"filename":"src/narray.cr","line_number":153,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L153"},"def":{"name":"zeros","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"}],"visibility":"Public","body":"data = ::Array(Float64).new(shape.product, 0.0)\nArray(Float64).new(shape, data)\n"}}],"types":[{"html_id":"narray/Narray/Array","path":"Narray/Array.html","kind":"class","full_name":"Narray::Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"narray/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"narray/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"narray/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/narray.cr","line_number":10,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L10"},{"filename":"src/narray/broadcast.cr","line_number":139,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L139"},{"filename":"src/narray/math.cr","line_number":3,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L3"},{"filename":"src/narray/operations.cr","line_number":3,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L3"}],"repository_name":"narray","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"narray/Narray","kind":"module","full_name":"Narray","name":"Narray"},"doc":"Main class for multi-dimensional arrays","summary":"<p>Main class for multi-dimensional arrays</p>","constructors":[{"html_id":"new(shape:::Array(Int32),data:::Array(T))-class-method","name":"new","doc":"Creates a new NArray with the given shape and data","summary":"<p>Creates a new NArray with the given shape and data</p>","abstract":false,"args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"args_string":"(shape : ::Array(Int32), data : ::Array(T))","args_html":"(shape : ::Array(Int32), data : ::Array(T))","location":{"filename":"src/narray.cr","line_number":18,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L18"},"def":{"name":"new","args":[{"name":"shape","external_name":"shape","restriction":"::Array(Int32)"},{"name":"data","external_name":"data","restriction":"::Array(T)"}],"visibility":"Public","body":"_ = Array(T).allocate\n_.initialize(shape, data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"*(other:Array(T)):Array(T)-instance-method","name":"*","doc":"Element-wise multiplication","summary":"<p>Element-wise multiplication</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":209,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L209"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] * other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] * broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot multiply arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"*(scalar:Number):Array(T)-instance-method","name":"*","doc":"Element-wise multiplication with a scalar","summary":"<p>Element-wise multiplication with a scalar</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":242,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L242"},"def":{"name":"*","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] * (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"+(other:Array(T)):Array(T)-instance-method","name":"+","doc":"Element-wise addition","summary":"<p>Element-wise addition</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":5,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L5"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] + other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] + broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot add arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"+(scalar:Number):Array(T)-instance-method","name":"+","doc":"Element-wise addition with a scalar","summary":"<p>Element-wise addition with a scalar</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":38,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L38"},"def":{"name":"+","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] + (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"-(other:Array(T)):Array(T)-instance-method","name":"-","doc":"Element-wise subtraction","summary":"<p>Element-wise subtraction</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":107,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L107"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = data[i] - other.data[i]\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      new_data[i] = broadcasted_self.data[i] - broadcasted_other.data[i]\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot subtract arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"-(scalar:Number):Array(T)-instance-method","name":"-","doc":"Element-wise subtraction with a scalar","summary":"<p>Element-wise subtraction with a scalar</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":140,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L140"},"def":{"name":"-","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = data[i] - (T.new(scalar))\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"--instance-method","name":"-","doc":"Element-wise negation","summary":"<p>Element-wise negation</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":419,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L419"},"def":{"name":"-","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = T.new(-data[i])\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"/(other:Array(T)):Array(T)-instance-method","name":"/","doc":"Element-wise division","summary":"<p>Element-wise division</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : Array(T)","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":311,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L311"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"Array(T)","visibility":"Public","body":"if shape == other.shape\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  size.times do |i|\n    new_data[i] = T.new((data[i] / other.data[i]).to_f)\n  end\n  Array(T).new(shape.dup, new_data)\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    broadcasted_self = Narray.broadcast(self, result_shape)\n    broadcasted_other = Narray.broadcast(other, result_shape)\n    new_data = ::Array(T).new(result_shape.product) do\n      T.zero\n    end\n    result_shape.product.times do |i|\n      value = (broadcasted_self.data[i].to_f64 / broadcasted_other.data[i].to_f64)\n      new_data[i] = T.new(value)\n    end\n    Array(T).new(result_shape, new_data)\n  else\n    raise(ArgumentError.new(\"Cannot divide arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"/(scalar:Number):Array(T)-instance-method","name":"/","doc":"Element-wise division with a scalar","summary":"<p>Element-wise division with a scalar</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : Array(T)","args_html":"(scalar : Number) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/math.cr","line_number":346,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L346"},"def":{"name":"/","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"Array(T)","visibility":"Public","body":"new_data = ::Array(T).new(size) do\n  T.zero\nend\nsize.times do |i|\n  new_data[i] = T.new((data[i] / (T.new(scalar))).to_f)\nend\nArray(T).new(shape.dup, new_data)\n"}},{"html_id":"[](indices:::Array(Int32)):T-instance-method","name":"[]","doc":"Returns the element at the given indices","summary":"<p>Returns the element at the given indices</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"args_string":"(indices : ::Array(Int32)) : T","args_html":"(indices : ::Array(Int32)) : T","location":{"filename":"src/narray.cr","line_number":37,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L37"},"def":{"name":"[]","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"}],"return_type":"T","visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nindices.each_with_index do |idx, dim|\n  if idx < 0 || idx >= shape[dim]\n    raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{shape[dim]}\"))\n  end\nend\nflat_idx = indices_to_flat_index(indices)\ndata[flat_idx]\n"}},{"html_id":"[]=(indices:::Array(Int32),value:T)-instance-method","name":"[]=","doc":"Sets the element at the given indices","summary":"<p>Sets the element at the given indices</p>","abstract":false,"args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"args_string":"(indices : ::Array(Int32), value : T)","args_html":"(indices : ::Array(Int32), value : T)","location":{"filename":"src/narray.cr","line_number":56,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L56"},"def":{"name":"[]=","args":[{"name":"indices","external_name":"indices","restriction":"::Array(Int32)"},{"name":"value","external_name":"value","restriction":"T"}],"visibility":"Public","body":"if indices.size != ndim\n  raise(IndexError.new(\"Wrong number of indices (#{indices.size} for #{ndim})\"))\nend\nindices.each_with_index do |idx, dim|\n  if idx < 0 || idx >= shape[dim]\n    raise(IndexError.new(\"Index #{idx} is out of bounds for dimension #{dim} with size #{shape[dim]}\"))\n  end\nend\nflat_idx = indices_to_flat_index(indices)\ndata[flat_idx] = value\n"}},{"html_id":"add!(other:Array(T)):self-instance-method","name":"add!","doc":"Element-wise addition in-place","summary":"<p>Element-wise addition in-place</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":51,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L51"},"def":{"name":"add!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_75 = i\n    @data[__temp_75] = @data[__temp_75] + other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_77 = i\n        __temp_78 = broadcasted_self.data\n        __temp_78[__temp_77] = __temp_78[__temp_77] + broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_79 = i\n        @data[__temp_79] = @data[__temp_79] + broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot add arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"add!(scalar:Number):self-instance-method","name":"add!","doc":"Element-wise addition with a scalar in-place","summary":"<p>Element-wise addition with a scalar in-place</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":97,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L97"},"def":{"name":"add!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_81 = i\n  @data[__temp_81] = @data[__temp_81] + (T.new(scalar))\nend\nself\n"}},{"html_id":"broadcast_to(new_shape:::Array(Int32)):Array(T)-instance-method","name":"broadcast_to","doc":"Broadcasts this array to a new shape","summary":"<p>Broadcasts this array to a new shape</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : Array(T)","args_html":"(new_shape : ::Array(Int32)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/broadcast.cr","line_number":141,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/broadcast.cr#L141"},"def":{"name":"broadcast_to","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"Narray.broadcast(self, new_shape)"}},{"html_id":"data:::Array(T)-instance-method","name":"data","doc":"The underlying data storage","summary":"<p>The underlying data storage</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":15,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L15"},"def":{"name":"data","return_type":"::Array(T)","visibility":"Public","body":"@data"}},{"html_id":"divide!(other:Array(T)):self-instance-method","name":"divide!","doc":"Element-wise division in-place","summary":"<p>Element-wise division in-place</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":359,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L359"},"def":{"name":"divide!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    @data[i] = T.new((@data[i] / other.data[i]).to_f)\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        value = (broadcasted_self.data[i].to_f64 / broadcasted_other.data[i].to_f64)\n        broadcasted_self.data[i] = T.new(value)\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        value = (@data[i].to_f64 / broadcasted_other.data[i].to_f64)\n        @data[i] = T.new(value)\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot divide arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"divide!(scalar:Number):self-instance-method","name":"divide!","doc":"Element-wise division with a scalar in-place","summary":"<p>Element-wise division with a scalar in-place</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":409,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L409"},"def":{"name":"divide!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  @data[i] = T.new((@data[i] / (T.new(scalar))).to_f)\nend\nself\n"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Returns a detailed string representation of the array for debugging","summary":"<p>Returns a detailed string representation of the array for debugging</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/narray.cr","line_number":97,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L97"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"Narray::Array(\"\nio << T.name\nio << \")[\"\nio << \"shape=\"\nio << shape.inspect\nio << \", \"\nio << \"ndim=\"\nio << ndim\nio << \", \"\nio << \"size=\"\nio << size\nio << \", \"\nio << \"data=\"\nif size <= 20\n  io << data.inspect\nelse\n  first_elements = data[0...10]\n  last_elements = data[(size - 10)...size]\n  io << \"[\"\n  first_elements.each_with_index do |elem, i|\n    io << elem\n    if i < (first_elements.size - 1)\n      io << \", \"\n    end\n  end\n  io << \", ... (#{size - 20} more elements) ... , \"\n  last_elements.each_with_index do |elem, i|\n    io << elem\n    if i < (last_elements.size - 1)\n      io << \", \"\n    end\n  end\n  io << \"]\"\nend\nio << \"]\"\n"}},{"html_id":"max:T-instance-method","name":"max","doc":"Maximum value","summary":"<p>Maximum value</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":447,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L447"},"def":{"name":"max","return_type":"T","visibility":"Public","body":"data.max"}},{"html_id":"mean:Float64-instance-method","name":"mean","doc":"Mean of all elements","summary":"<p>Mean of all elements</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":437,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L437"},"def":{"name":"mean","return_type":"Float64","visibility":"Public","body":"sum.to_f / size"}},{"html_id":"min:T-instance-method","name":"min","doc":"Minimum value","summary":"<p>Minimum value</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":442,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L442"},"def":{"name":"min","return_type":"T","visibility":"Public","body":"data.min"}},{"html_id":"multiply!(other:Array(T)):self-instance-method","name":"multiply!","doc":"Element-wise multiplication in-place","summary":"<p>Element-wise multiplication in-place</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":255,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L255"},"def":{"name":"multiply!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_91 = i\n    @data[__temp_91] = @data[__temp_91] * other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_93 = i\n        __temp_94 = broadcasted_self.data\n        __temp_94[__temp_93] = __temp_94[__temp_93] * broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_95 = i\n        @data[__temp_95] = @data[__temp_95] * broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot multiply arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"multiply!(scalar:Number):self-instance-method","name":"multiply!","doc":"Element-wise multiplication with a scalar in-place","summary":"<p>Element-wise multiplication with a scalar in-place</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":301,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L301"},"def":{"name":"multiply!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_97 = i\n  @data[__temp_97] = @data[__temp_97] * (T.new(scalar))\nend\nself\n"}},{"html_id":"ndim:Int32-instance-method","name":"ndim","doc":"Returns the number of dimensions of the array","summary":"<p>Returns the number of dimensions of the array</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":27,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L27"},"def":{"name":"ndim","return_type":"Int32","visibility":"Public","body":"shape.size"}},{"html_id":"reshape(new_shape:::Array(Int32)):Array(T)-instance-method","name":"reshape","doc":"Reshapes the array to the new shape\nThe total number of elements must remain the same","summary":"<p>Reshapes the array to the new shape The total number of elements must remain the same</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : Array(T)","args_html":"(new_shape : ::Array(Int32)) : <a href=\"../Narray/Array.html\">Array</a>(T)","location":{"filename":"src/narray/operations.cr","line_number":6,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L6"},"def":{"name":"reshape","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"Array(T)","visibility":"Public","body":"new_size = new_shape.product\nif new_size != size\n  raise(ArgumentError.new(\"Cannot reshape array of size #{size} into shape #{new_shape} with size #{new_size}\"))\nend\nArray(T).new(new_shape, data.dup)\n"}},{"html_id":"reshape!(new_shape:::Array(Int32)):self-instance-method","name":"reshape!","doc":"Reshapes the array to the new shape in-place\nThe total number of elements must remain the same","summary":"<p>Reshapes the array to the new shape in-place The total number of elements must remain the same</p>","abstract":false,"args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"args_string":"(new_shape : ::Array(Int32)) : self","args_html":"(new_shape : ::Array(Int32)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/operations.cr","line_number":19,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L19"},"def":{"name":"reshape!","args":[{"name":"new_shape","external_name":"new_shape","restriction":"::Array(Int32)"}],"return_type":"self","visibility":"Public","body":"new_size = new_shape.product\nif new_size != size\n  raise(ArgumentError.new(\"Cannot reshape array of size #{size} into shape #{new_shape} with size #{new_size}\"))\nend\n@shape = new_shape.dup\nself\n"}},{"html_id":"shape:::Array(Int32)-instance-method","name":"shape","doc":"The shape of the array (dimensions)","summary":"<p>The shape of the array (dimensions)</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":12,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L12"},"def":{"name":"shape","return_type":"::Array(Int32)","visibility":"Public","body":"@shape"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the total number of elements in the array","summary":"<p>Returns the total number of elements in the array</p>","abstract":false,"location":{"filename":"src/narray.cr","line_number":32,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L32"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"data.size"}},{"html_id":"std:Float64-instance-method","name":"std","doc":"Standard deviation","summary":"<p>Standard deviation</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":452,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L452"},"def":{"name":"std","return_type":"Float64","visibility":"Public","body":"m = mean\nvariance = data.sum do |x|\n  (x.to_f - m) ** 2\nend / size\nMath.sqrt(variance)\n"}},{"html_id":"subtract!(other:Array(T)):self-instance-method","name":"subtract!","doc":"Element-wise subtraction in-place","summary":"<p>Element-wise subtraction in-place</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"args_string":"(other : Array(T)) : self","args_html":"(other : <a href=\"../Narray/Array.html\">Array</a>(T)) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":153,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L153"},"def":{"name":"subtract!","args":[{"name":"other","external_name":"other","restriction":"Array(T)"}],"return_type":"self","visibility":"Public","body":"if shape == other.shape\n  size.times do |i|\n    __temp_83 = i\n    @data[__temp_83] = @data[__temp_83] - other.data[i]\n  end\n  self\nelse\n  if result_shape = Narray.broadcast_shapes(shape, other.shape)\n    if result_shape != shape\n      broadcasted_self = Narray.broadcast(self, result_shape)\n      broadcasted_other = Narray.broadcast(other, result_shape)\n      result_shape.product.times do |i|\n        __temp_85 = i\n        __temp_86 = broadcasted_self.data\n        __temp_86[__temp_85] = __temp_86[__temp_85] - broadcasted_other.data[i]\n      end\n      @data = broadcasted_self.data\n      @shape = result_shape\n      self\n    else\n      broadcasted_other = Narray.broadcast(other, shape)\n      size.times do |i|\n        __temp_87 = i\n        @data[__temp_87] = @data[__temp_87] - broadcasted_other.data[i]\n      end\n      self\n    end\n  else\n    raise(ArgumentError.new(\"Cannot subtract arrays with incompatible shapes: #{shape} and #{other.shape}\"))\n  end\nend"}},{"html_id":"subtract!(scalar:Number):self-instance-method","name":"subtract!","doc":"Element-wise subtraction with a scalar in-place","summary":"<p>Element-wise subtraction with a scalar in-place</p>","abstract":false,"args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"args_string":"(scalar : Number) : self","args_html":"(scalar : Number) : <span class=\"k\">self</span>","location":{"filename":"src/narray/math.cr","line_number":199,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L199"},"def":{"name":"subtract!","args":[{"name":"scalar","external_name":"scalar","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"size.times do |i|\n  __temp_89 = i\n  @data[__temp_89] = @data[__temp_89] - (T.new(scalar))\nend\nself\n"}},{"html_id":"sum:T-instance-method","name":"sum","doc":"Sum of all elements","summary":"<p>Sum of all elements</p>","abstract":false,"location":{"filename":"src/narray/math.cr","line_number":432,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/math.cr#L432"},"def":{"name":"sum","return_type":"T","visibility":"Public","body":"data.sum"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Returns a string representation of the array","summary":"<p>Returns a string representation of the array</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/narray.cr","line_number":88,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray.cr#L88"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"Narray.array(\"\nio << shape.inspect\nio << \", \"\nio << data.inspect\nio << \")\"\n"}},{"html_id":"transpose:Array(T)-instance-method","name":"transpose","doc":"Returns the transpose of the array\nFor 1D arrays, this returns a copy of the array\nFor 2D arrays, this swaps rows and columns\nFor higher dimensions, this reverses the order of dimensions","summary":"<p>Returns the transpose of the array For 1D arrays, this returns a copy of the array For 2D arrays, this swaps rows and columns For higher dimensions, this reverses the order of dimensions</p>","abstract":false,"location":{"filename":"src/narray/operations.cr","line_number":35,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L35"},"def":{"name":"transpose","return_type":"Array(T)","visibility":"Public","body":"case ndim\nwhen 0, 1\n  Array(T).new(shape.dup, data.dup)\nwhen 2\n  rows, cols = shape\n  new_shape = [cols, rows]\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  rows.times do |i|\n    cols.times do |j|\n      new_data[(j * rows) + i] = data[(i * cols) + j]\n    end\n  end\n  Array(T).new(new_shape, new_data)\nelse\n  new_shape = shape.reverse\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  indices = ::Array(Int32).new(ndim, 0)\n  size.times do |i|\n    flat_idx = i\n    stride = 1\n    indices.size.times do |dim|\n      indices[dim] = (flat_idx // stride) % shape[dim]\n      stride = stride * shape[dim]\n    end\n    reversed_indices = indices.reverse\n    new_flat_idx = 0\n    stride = 1\n    reversed_indices.size.times do |dim|\n      new_flat_idx = new_flat_idx + (reversed_indices[dim] * stride)\n      stride = stride * new_shape[dim]\n    end\n    new_data[new_flat_idx] = data[i]\n  end\n  Array(T).new(new_shape, new_data)\nend"}},{"html_id":"transpose!:self-instance-method","name":"transpose!","doc":"Transposes the array in-place\nFor 1D arrays, this does nothing\nFor 2D arrays, this swaps rows and columns\nFor higher dimensions, this reverses the order of dimensions\nNote: This method creates a new data array and updates the shape","summary":"<p>Transposes the array in-place For 1D arrays, this does nothing For 2D arrays, this swaps rows and columns For higher dimensions, this reverses the order of dimensions Note: This method creates a new data array and updates the shape</p>","abstract":false,"location":{"filename":"src/narray/operations.cr","line_number":92,"url":"https://github.com/kojix2/narray/blob/4a84876d08edf6b286f085e479791bdc1b83130d/src/narray/operations.cr#L92"},"def":{"name":"transpose!","return_type":"self","visibility":"Public","body":"case ndim\nwhen 0, 1\n  return self\nwhen 2\n  rows, cols = shape\n  new_shape = [cols, rows]\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  rows.times do |i|\n    cols.times do |j|\n      new_data[(j * rows) + i] = data[(i * cols) + j]\n    end\n  end\n  @shape = new_shape\n  @data = new_data\nelse\n  new_shape = shape.reverse\n  new_data = ::Array(T).new(size) do\n    T.zero\n  end\n  indices = ::Array(Int32).new(ndim, 0)\n  size.times do |i|\n    flat_idx = i\n    stride = 1\n    indices.size.times do |dim|\n      indices[dim] = (flat_idx // stride) % shape[dim]\n      stride = stride * shape[dim]\n    end\n    reversed_indices = indices.reverse\n    new_flat_idx = 0\n    stride = 1\n    reversed_indices.size.times do |dim|\n      new_flat_idx = new_flat_idx + (reversed_indices[dim] * stride)\n      stride = stride * new_shape[dim]\n    end\n    new_data[new_flat_idx] = data[i]\n  end\n  @shape = new_shape\n  @data = new_data\nend\nself\n"}}]}]}]}}